geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = qnorm(.975) * (1/nrow(s_acf_50_df))^2))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = qnorm(.025) * (1/nrow(s_acf_50_df))^2))
qnorm(.025) * (1/nrow(s_acf_50_df))^2)
qnorm(.025) * (1/nrow(s_acf_50_df))^2
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df)))) +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df), col = "blue"))) +
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df), color = "blue"))) +
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df)), color = "blue")) +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df)), colour = "blue")) +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df)), colo = "blue")) +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df)), color = "blue")) +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df), color="black", linetype="dashed"))) +
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df)), color="black", linetype="dashed")) +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df))), color="black", linetype="dashed") +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))))
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed")
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed")
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = mean(s_acf_50) + 2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = mean(s_acf_50) - 2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed")
mean(s_acf_50)
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2*(1/nrow(s_acf_50_df))), color="blue", linetype="dashed")
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2/nrow(s_acf_50_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_50_df)), color="blue", linetype="dashed")
x_1000 <- problem1_fun(1000)
x_10000 <- problem1_fun(10000)
s_acf_1000 <- sample_acf(x_1000,50)
s_acf_10000 <- sample_acf(x_10000,50)
s_acf_10000 <- sample_acf(x_10000,10000)
s_acf_10000 <- sample_acf(x_10000,10000)
s_acf_1000 <- sample_acf(x_1000,1000)
nrow(s_acf_50_df)
s_acf_1000_df <- data.frame("lag" = 1:length(s_acf_1000)-1, "acf" = s_acf_1000)
ggplot(s_acf_1000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1 with ") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_1000_df$acf), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_1000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_1000_df)), color="blue", linetype="dashed")
ggplot(s_acf_10000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_10000_df$acf), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_10000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_10000_df)), color="blue", linetype="dashed")
-2/nrow(s_acf_10000_df)
min(s_acf_10000_df$acf)
ggplot(s_acf_10000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_10000_df$acf, -2/nrow(s_acf_10000_df)), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_10000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_10000_df)), color="blue", linetype="dashed")
2/nrow(s_acf_1000_df)
min(s_acf_1000_df$acf)
-2/nrow(s_acf_1000_df)
remove.packages("reticulate", lib="C:/Users/olara/OneDrive/R/R-4.2.3/library")
install.packages("RcppArmadillo")
install.packages(c("DEoptimR", "KernSmooth", "Matrix", "MatrixModels", "Rcpp", "Rdpack", "TMB", "VGAM", "arrow", "askpass", "bookdown", "broom", "bslib", "classInt", "config", "cpp11", "credentials", "curl", "datawizard", "dbplyr", "deSolve", "digest", "directlabels", "downlit", "dplyr", "effectsize", "ellipse", "emmeans", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "future", "gargle", "gert", "ggeffects", "ggplot2", "ggplotify", "glmmTMB", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "igraph", "insight", "jsonlite", "keras", "knitr", "ks", "labeling", "lattice", "lme4", "locfit", "lubridate", "markdown", "matrixStats", "mgcv", "minqa", "mvtnorm", "nlme", "openssl", "pROC", "pals", "parameters", "patchwork", "pdftools", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "prettyunits", "processx", "prodlim", "progressr", "promises", "purrr", "quantreg", "rbibutils", "readxl", "recipes", "rematch", "remotes", "rgeos", "rgl", "rmarkdown", "robustbase", "rpart", "rrcov", "rstudioapi", "sass", "sf", "sfsmisc", "shiny", "sjPlot", "snakecase", "sp", "spData", "spatial", "splancs", "survival", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tikzDevice", "tinytex", "units", "usethis", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "xml2", "yulab.utils"), lib="C:/Users/olara/OneDrive/R/R-4.2.3/library")
install.packages(c("DEoptimR", "KernSmooth", "Matrix", "MatrixModels", "Rcpp", "Rdpack", "TMB", "VGAM", "arrow", "askpass", "bookdown", "broom", "bslib", "classInt", "config", "cpp11", "credentials", "curl", "datawizard", "dbplyr", "deSolve", "digest", "directlabels", "downlit", "dplyr", "effectsize", "ellipse", "emmeans", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "future", "gargle", "gert", "ggeffects", "ggplot2", "ggplotify", "glmmTMB", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "igraph", "insight", "jsonlite", "keras", "knitr", "ks", "labeling", "lattice", "lme4", "locfit", "lubridate", "markdown", "matrixStats", "mgcv", "minqa", "mvtnorm", "nlme", "openssl", "pROC", "pals", "parameters", "patchwork", "pdftools", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "prettyunits", "processx", "prodlim", "progressr", "promises", "purrr", "quantreg", "rbibutils", "readxl", "recipes", "rematch", "remotes", "rgeos", "rgl", "rmarkdown", "robustbase", "rpart", "rrcov", "rstudioapi", "sass", "sf", "sfsmisc", "shiny", "sjPlot", "snakecase", "sp", "spData", "spatial", "splancs", "survival", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tikzDevice", "tinytex", "units", "usethis", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "xml2", "yulab.utils"), lib = "C:/Users/olara/OneDrive/R/R-4.2.3/library")
install.packages(c("DEoptimR", "KernSmooth", "Matrix", "MatrixModels", "Rcpp", "Rdpack", "TMB", "VGAM", "arrow", "askpass", "bookdown", "broom", "bslib", "classInt", "config", "cpp11", "credentials", "curl", "datawizard", "dbplyr", "deSolve", "digest", "directlabels", "downlit", "dplyr", "effectsize", "ellipse", "emmeans", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "future", "gargle", "gert", "ggeffects", "ggplot2", "ggplotify", "glmmTMB", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "igraph", "insight", "jsonlite", "keras", "knitr", "ks", "labeling", "lattice", "lme4", "locfit", "lubridate", "markdown", "matrixStats", "mgcv", "minqa", "mvtnorm", "nlme", "openssl", "pROC", "pals", "parameters", "patchwork", "pdftools", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "prettyunits", "processx", "prodlim", "progressr", "promises", "purrr", "quantreg", "rbibutils", "readxl", "recipes", "rematch", "remotes", "rgeos", "rgl", "rmarkdown", "robustbase", "rpart", "rrcov", "rstudioapi", "sass", "sf", "sfsmisc", "shiny", "sjPlot", "snakecase", "sp", "spData", "spatial", "splancs", "survival", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tikzDevice", "tinytex", "units", "usethis", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "xml2", "yulab.utils"), lib = "C:/Users/olara/OneDrive/R/R-4.2.3/library")
install.packages(c("DEoptimR", "KernSmooth", "Matrix", "MatrixModels", "Rcpp", "Rdpack", "TMB", "VGAM", "arrow", "askpass", "bookdown", "broom", "bslib", "classInt", "config", "cpp11", "credentials", "curl", "datawizard", "dbplyr", "deSolve", "digest", "directlabels", "downlit", "dplyr", "effectsize", "ellipse", "emmeans", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "future", "gargle", "gert", "ggeffects", "ggplot2", "ggplotify", "glmmTMB", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "igraph", "insight", "jsonlite", "keras", "knitr", "ks", "labeling", "lattice", "lme4", "locfit", "lubridate", "markdown", "matrixStats", "mgcv", "minqa", "mvtnorm", "nlme", "openssl", "pROC", "pals", "parameters", "patchwork", "pdftools", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "prettyunits", "processx", "prodlim", "progressr", "promises", "purrr", "quantreg", "rbibutils", "readxl", "recipes", "rematch", "remotes", "rgeos", "rgl", "rmarkdown", "robustbase", "rpart", "rrcov", "rstudioapi", "sass", "sf", "sfsmisc", "shiny", "sjPlot", "snakecase", "sp", "spData", "spatial", "splancs", "survival", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tikzDevice", "tinytex", "units", "usethis", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "xml2", "yulab.utils"), lib = "C:/Users/olara/OneDrive/R/R-4.2.3/library")
install.packages(c("DEoptimR", "KernSmooth", "Matrix", "MatrixModels", "Rcpp", "Rdpack", "TMB", "VGAM", "arrow", "askpass", "bookdown", "broom", "bslib", "classInt", "config", "cpp11", "credentials", "curl", "datawizard", "dbplyr", "deSolve", "digest", "directlabels", "downlit", "dplyr", "effectsize", "ellipse", "emmeans", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "future", "gargle", "gert", "ggeffects", "ggplot2", "ggplotify", "glmmTMB", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "igraph", "insight", "jsonlite", "keras", "knitr", "ks", "labeling", "lattice", "lme4", "locfit", "lubridate", "markdown", "matrixStats", "mgcv", "minqa", "mvtnorm", "nlme", "openssl", "pROC", "pals", "parameters", "patchwork", "pdftools", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "prettyunits", "processx", "prodlim", "progressr", "promises", "purrr", "quantreg", "rbibutils", "readxl", "recipes", "rematch", "remotes", "rgeos", "rgl", "rmarkdown", "robustbase", "rpart", "rrcov", "rstudioapi", "sass", "sf", "sfsmisc", "shiny", "sjPlot", "snakecase", "sp", "spData", "spatial", "splancs", "survival", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tikzDevice", "tinytex", "units", "usethis", "uuid", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "xml2", "yulab.utils"), lib = "C:/Users/olara/OneDrive/R/R-4.2.3/library")
knitr::opts_chunk$set(echo = T, fig.align = 'center')
library(tidyverse)
theme_update(plot.title = element_text(hjust = 0.5))
problem1_fun <- function(t) {
set.seed(97)
x <- 0
w <- c(0, rnorm(t))
for (i in 1:t+1) {
x[i] <- w[i] + w[i-1]
}
return(x)
}
x_50 <- problem1_fun(50)
problem1_fun <- function(t) {
set.seed(97)
x <- 0
w <- c(0, rnorm(t))
for (i in 1:t + 1) {
x[i] <- w[i] + w[i - 1]
}
return(x)
}
x_50 <- problem1_fun(50)
x_50
problem1_fun
x_50_df <- data.frame("t" = 0:(length(x_50) - 1), "x" = x_50)
ggplot(x_50_df, aes(t,x)) +
ggtitle("50 timesteps of Model 1.1") +
geom_line() +
ylim(-max(abs(x_50_df$x)), max(abs(x_50_df$x)))
knitr::opts_chunk$set(echo = T, fig.align = 'center')
library(tidyverse)
theme_update(plot.title = element_text(hjust = 0.5))
problem1_fun <- function(t) {
set.seed(97)
x <- 0
w <- c(0, rnorm(t))
for (i in 1:t + 1) {
x[i] <- w[i] + w[i - 1]
}
return(x)
}
x_50 <- problem1_fun(50)
knitr::opts_chunk$set(echo = T, fig.align = 'center')
library(tidyverse)
theme_update(plot.title = element_text(hjust = 0.5))
x_50_df <- data.frame("t" = 0:(length(x_50) - 1), "x" = x_50)
ggplot(x_50_df, aes(t,x)) +
ggtitle("50 timesteps of Model 1.1") +
geom_line() +
ylim(-max(abs(x_50_df$x)), max(abs(x_50_df$x)))
x_50_df <- data.frame("t" = 0:(length(x_50) - 1), "x" = x_50)
ggplot(x_50_df, aes(t,x)) +
ggtitle("50 timesteps of Model 1.1") +
geom_line() +
ylim(-max(abs(x_50_df$x)), max(abs(x_50_df$x)))
lag <- 0:10
theoretical_acf <- c(1,1/2,rep(0,9))
lags_theoretical_acf_df <- data.frame("lag" = lag, "acf" = theoretical_acf)
ggplot(lags_theoretical_acf_df, aes(lag,acf)) +
ggtitle("Theoretical ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(0, max(lags_theoretical_acf_df$acf))
sample_acf <- function(x,h) {
s_acovf <- vector()
x_mean <- mean(x)
n <- length(x)
lag <- 0:h
for (i in lag) {
summ <- vector()
for (j in 1:(n - i)) {summ[j] <- (x[j + i] - x_mean) * (x[j] - x_mean)}
s_acovf[i+1] <- n^(-1) * sum(summ)
}
s_acf <- s_acovf/s_acovf[1]
return(s_acf)
}
s_acf_50 <- sample_acf(x_50,50)
s_acf_50_df <- data.frame("lag" = 1:length(s_acf_50)-1, "acf" = s_acf_50)
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2/nrow(s_acf_50_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_50_df)), color="blue", linetype="dashed")
acf(x_50,50)
x_1000 <- problem1_fun(1000)
x_10000 <- problem1_fun(10000)
s_acf_1000 <- sample_acf(x_1000,1000)
s_acf_10000 <- sample_acf(x_10000,10000)
s_acf_1000_df <- data.frame("lag" = 1:length(s_acf_1000)-1, "acf" = s_acf_1000)
ggplot(s_acf_1000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1 with ") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_1000_df$acf), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_1000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_1000_df)), color="blue", linetype="dashed")
s_acf_10000_df <- data.frame("lag" = 1:length(s_acf_10000)-1, "acf" = s_acf_10000)
ggplot(s_acf_10000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_10000_df$acf, -2/nrow(s_acf_10000_df)), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_10000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_10000_df)), color="blue", linetype="dashed")
s_acf_10000_df <- data.frame("lag" = 1:length(s_acf_10000)-1, "acf" = s_acf_10000)
ggplot(s_acf_10000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_10000_df$acf, -2/nrow(s_acf_10000_df)), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_10000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_10000_df)), color="blue", linetype="dashed")
s_acf_10000_df <- data.frame("lag" = 1:length(s_acf_10000)-1, "acf" = s_acf_10000)
ggplot(s_acf_10000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_10000_df$acf, -2/nrow(s_acf_10000_df)), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_10000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_10000_df)), color="blue", linetype="dashed")
tinytex::install_tinytex()
element_text
theme_update(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(echo = T, fig.align = 'center')
library(tidyverse)
theme_update(plot.title = element_text(hjust = 0.5))
plot.title
element_text
theme_update
theme_update(plot.title = element_text(hjust = 0.5))
problem1_fun <- function(t) {
set.seed(97)
x <- 0
w <- c(0, rnorm(t))
for (i in 1:t + 1) {
x[i] <- w[i] + w[i - 1]
}
return(x)
}
x_50 <- problem1_fun(50)
x_50_df <- data.frame("t" = 0:(length(x_50) - 1), "x" = x_50)
ggplot(x_50_df, aes(t,x)) +
ggtitle("50 timesteps of Model 1.1") +
geom_line() +
ylim(-max(abs(x_50_df$x)), max(abs(x_50_df$x)))
lag <- 0:10
theoretical_acf <- c(1,1/2,rep(0,9))
lags_theoretical_acf_df <- data.frame("lag" = lag, "acf" = theoretical_acf)
ggplot(lags_theoretical_acf_df, aes(lag,acf)) +
ggtitle("Theoretical ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(0, max(lags_theoretical_acf_df$acf))
sample_acf <- function(x,h) {
s_acovf <- vector()
x_mean <- mean(x)
n <- length(x)
lag <- 0:h
for (i in lag) {
summ <- vector()
for (j in 1:(n - i)) {summ[j] <- (x[j + i] - x_mean) * (x[j] - x_mean)}
s_acovf[i+1] <- n^(-1) * sum(summ)
}
s_acf <- s_acovf/s_acovf[1]
return(s_acf)
}
s_acf_50 <- sample_acf(x_50,50)
knitr::opts_chunk$set(echo = T, fig.align = 'center')
library(tidyverse)
theme_update(plot.title = element_text(hjust = 0.5))
problem1_fun <- function(t) {
set.seed(97)
x <- 0
w <- c(0, rnorm(t))
for (i in 1:t + 1) {
x[i] <- w[i] + w[i - 1]
}
return(x)
}
x_50 <- problem1_fun(50)
x_50_df <- data.frame("t" = 0:(length(x_50) - 1), "x" = x_50)
ggplot(x_50_df, aes(t,x)) +
ggtitle("50 timesteps of Model 1.1") +
geom_line() +
ylim(-max(abs(x_50_df$x)), max(abs(x_50_df$x)))
lag <- 0:10
theoretical_acf <- c(1,1/2,rep(0,9))
lags_theoretical_acf_df <- data.frame("lag" = lag, "acf" = theoretical_acf)
ggplot(lags_theoretical_acf_df, aes(lag,acf)) +
ggtitle("Theoretical ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(0, max(lags_theoretical_acf_df$acf))
sample_acf <- function(x,h) {
s_acovf <- vector()
x_mean <- mean(x)
n <- length(x)
lag <- 0:h
for (i in lag) {
summ <- vector()
for (j in 1:(n - i)) {summ[j] <- (x[j + i] - x_mean) * (x[j] - x_mean)}
s_acovf[i + 1] <- n^(-1) * sum(summ)
}
s_acf <- s_acovf/s_acovf[1]
return(s_acf)
}
s_acf_50 <- sample_acf(x_50,50)
s_acf_50_df <- data.frame("lag" = 1:length(s_acf_50) - 1, "acf" = s_acf_50)
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2/nrow(s_acf_50_df)), color = "blue", linetype = "dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_50_df)), color = "blue", linetype = "dashed")
x_1000 <- problem1_fun(1000)
x_10000 <- problem1_fun(10000)
s_acf_1000 <- sample_acf(x_1000,1000)
s_acf_10000 <- sample_acf(x_10000,10000)
s_acf_1000_df <- data.frame("lag" = 1:length(s_acf_1000) - 1, "acf" = s_acf_1000)
ggplot(s_acf_1000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1 with ") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_1000_df$acf), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_1000_df)), color = "blue", linetype = "dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_1000_df)), color = "blue", linetype = "dashed")
s_acf_10000_df <- data.frame("lag" = 1:length(s_acf_10000)-1, "acf" = s_acf_10000)
ggplot(s_acf_10000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_10000_df$acf, -2/nrow(s_acf_10000_df)), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_10000_df)), color="blue", linetype="dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_10000_df)), color="blue", linetype="dashed")
knitr::opts_chunk$set(echo = T, fig.align = 'center')
library(tidyverse)
theme_update(plot.title = element_text(hjust = 0.5))
problem1_fun <- function(t) {
set.seed(97)
x <- 0
w <- c(0, rnorm(t))
for (i in 1:t + 1) {
x[i] <- w[i] + w[i - 1]
}
return(x)
}
x_50 <- problem1_fun(50)
x_50_df <- data.frame("t" = 0:(length(x_50) - 1), "x" = x_50)
ggplot(x_50_df, aes(t,x)) +
ggtitle("50 timesteps of Model 1.1") +
geom_line() +
ylim(-max(abs(x_50_df$x)), max(abs(x_50_df$x)))
lag <- 0:10
theoretical_acf <- c(1,1/2,rep(0,9))
lags_theoretical_acf_df <- data.frame("lag" = lag, "acf" = theoretical_acf)
ggplot(lags_theoretical_acf_df, aes(lag,acf)) +
ggtitle("Theoretical ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(0, max(lags_theoretical_acf_df$acf))
sample_acf <- function(x,h) {
s_acovf <- vector()
x_mean <- mean(x)
n <- length(x)
lag <- 0:h
for (i in lag) {
summ <- vector()
for (j in 1:(n - i)) {summ[j] <- (x[j + i] - x_mean) * (x[j] - x_mean)}
s_acovf[i + 1] <- n^(-1) * sum(summ)
}
s_acf <- s_acovf/s_acovf[1]
return(s_acf)
}
s_acf_50 <- sample_acf(x_50,50)
s_acf_50_df <- data.frame("lag" = 1:length(s_acf_50) - 1, "acf" = s_acf_50)
ggplot(s_acf_50_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_50_df$acf), 1.25) +
geom_hline(aes(yintercept = 2/nrow(s_acf_50_df)), color = "blue", linetype = "dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_50_df)), color = "blue", linetype = "dashed")
x_1000 <- problem1_fun(1000)
x_10000 <- problem1_fun(10000)
s_acf_1000 <- sample_acf(x_1000,1000)
s_acf_10000 <- sample_acf(x_10000,10000)
s_acf_1000_df <- data.frame("lag" = 1:length(s_acf_1000) - 1, "acf" = s_acf_1000)
ggplot(s_acf_1000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1 with ") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_1000_df$acf), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_1000_df)), color = "blue", linetype = "dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_1000_df)), color = "blue", linetype = "dashed")
s_acf_10000_df <- data.frame("lag" = 1:length(s_acf_10000) - 1, "acf" = s_acf_10000)
ggplot(s_acf_10000_df, aes(lag,acf)) +
ggtitle("Sample ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(min(s_acf_10000_df$acf, -2/nrow(s_acf_10000_df)), 1.3) +
geom_hline(aes(yintercept = 2/nrow(s_acf_10000_df)), color = "blue", linetype = "dashed") +
geom_hline(aes(yintercept = -2/nrow(s_acf_10000_df)), color = "blue", linetype = "dashed")
knitr::opts_chunk$set(echo = T, fig.align = 'center')
library(tidyverse)
theme_update(plot.title = element_text(hjust = 0.5))
problem1_fun <- function(t) {
set.seed(97)
x <- 0
w <- c(0, rnorm(t))
for (i in 1:t + 1) {
x[i] <- w[i] + w[i - 1]
}
return(x)
}
x_50 <- problem1_fun(50)
x_50_df <- data.frame("t" = 0:(length(x_50) - 1), "x" = x_50)
ggplot(x_50_df, aes(t,x)) +
ggtitle("50 timesteps of Model 1.1") +
geom_line() +
ylim(-max(abs(x_50_df$x)), max(abs(x_50_df$x)))
lag <- 0:10
theoretical_acf <- c(1,1/2,rep(0,9))
lags_theoretical_acf_df <- data.frame("lag" = lag, "acf" = theoretical_acf)
ggplot(lags_theoretical_acf_df, aes(lag,acf)) +
ggtitle("Theoretical ACF of Model 1.1") +
geom_hline(aes(yintercept = 0)) +
geom_segment(mapping = aes(xend = lag, yend = 0)) +
ylim(0, max(lags_theoretical_acf_df$acf))
sample_acf <- function(x,h) {
s_acovf <- vector()
x_mean <- mean(x)
n <- length(x)
lag <- 0:h
for (i in lag) {
summ <- vector()
for (j in 1:(n - i)) {summ[j] <- (x[j + i] - x_mean) * (x[j] - x_mean)}
s_acovf[i + 1] <- n^(-1) * sum(summ)
}
s_acf <- s_acovf/s_acovf[1]
return(s_acf)
}
0:h
h=50
0:h
s_acf_50

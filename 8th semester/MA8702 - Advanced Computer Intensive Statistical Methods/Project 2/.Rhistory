predict_id <- (n - n_predict):(n - i)
y_test <- df[predict_id, "y"]
df_train[predict_id, "y"] <- NA
linear_model_train <- inla(y ~ 1 + x_tilde,
data = df_train,
control.compute = list(config = TRUE))
linear_y_hat <- linear_model_train$summary.fitted.values[predict_id, "0.5quant"]
linear_model_loss_values$MAPE[i] <- mean(abs(linear_y_hat - y_test))
linear_model_loss_values$RMSPE[i] <- sqrt(mean((linear_y_hat - y_test)^2))
ar1_model_train <- inla(y ~ 1 + f(t, model = "ar1"),
data = df_train,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = F))))
ar1_y_hat <- ar1_model_train$summary.fitted.values[predict_id, "0.5quant"]
ar1_model_loss_values$MAPE[i] <- mean(abs(ar1_y_hat - y_test))
ar1_model_loss_values$RMSPE[i] <- sqrt(mean((ar1_y_hat - y_test)^2))
ar1_fixed_model_train <- inla(y ~ 1 + f(t, model = "ar1"),
data = df_train,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = TRUE))))
ar1_fixed_y_hat <- ar1_fixed_model_train$summary.fitted.values[predict_id, "0.5quant"]
ar1_fixed_model_loss_values$MAPE[i] <- mean(abs(ar1_fixed_y_hat - y_test))
ar1_fixed_model_loss_values$RMSPE[i] <- sqrt(mean((ar1_fixed_y_hat - y_test)^2))
}
loss_values <- round(data.frame(rbind(colMeans(linear_model_loss_values), colMeans(ar1_model_loss_values), colMeans(ar1_fixed_model_loss_values))), 3)
rownames(loss_values) <- c("Linear", "AR1", "AR1 fixed")
loss_values
ar1_model_loss_values = ar1_fixed_model_loss_values
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(ggspatial)
library(geoR)
library(akima)
library(fields)
library(sp)
library(raster)
library(scales)
library(haven)
library(mnormt)
library(plotly)
library(rayshader)
library(gridExtra)
library(forecast)
library(viridis)
library(plot3D)
library(demogR)
library(spatial)
# install.packages("INLA", repos = c(getOption("repos"), INLA = "https://inla.r-inla-download.org/R/testing"), dep = TRUE)
# inla.upgrade(testing = TRUE)
library(INLA)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = sort(x_tilde), y = sort(y)), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = 2, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = 2, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
# Total number of time points
n <- 2000
# Autocorrelation coefficient
rho <- .9
# Marginal variance and standard deviation
marg_var <- 1
marg_sd <- sqrt(marg_var)
# Epsilon variance and standard deviation
eps_var <- (1 - rho^2) * marg_var
eps_sd <- sqrt(eps_var)
# Intercept
beta_0 <- 30
set.seed(1234)
# Simulating radiation
rad <- c(arima.sim(list(order = c(1, 0, 0), ar = rho), n = n, sd = eps_sd))
# Error variance and standard deviation
err_var <- .1
err_sd <- sqrt(err_var)
# Simulating error terms
error <- rnorm(n, sd = err_sd)
# Setting temperature
temp <- beta_0 + rad + error
# Setting imperfect radiation observations
rad_tilde <- rad * abs(rad)
# Creating data frame
df <- data.frame(y = temp, x_tilde = rad_tilde, x = rad, t = 1:n)
# Fitting a linear model using INLA with temperature as the response and the imperfect radiation observation as the covariate
linear_model <- inla(y ~ 1 + x_tilde,
data = df,
control.compute = list(config = TRUE))
summary(linear_model)
# Fitting an AR(1) model using INLA with temperature as the response and an AR(1) process as the covariate
ar1_model <- inla(y ~ 1 + f(t, model = "ar1"),
data = df,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = F))))
summary(ar1_model)
# Fitting an AR(1) model using INLA with temperature as the response and an AR(1) process with marginal precision of 1/0.1 as the covariate
ar1_fixed_model <- inla(y ~ 1 + f(t, model = "ar1"),
data = df,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = T)))
)
summary(ar1_fixed_model)
df_linear_model <- data.frame(temp = linear_model$summary.fitted.values$"0.5quant", rad_tilde = linear_model$.args$data$x_tilde, t = 1:n)
df_ar1_model <- data.frame(temp = ar1_model$summary.fitted.values$"0.5quant", rad_tilde = ar1_model$.args$data$x_tilde, t = 1:n)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = sort(x_tilde), y = sort(y)), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = 2, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = 2, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.1_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_linear_model, linewidth = .5, color = "blue") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.2_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_1_reproduced
Figure_2.1_reproduced
Figure_2.2_reproduced
# ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = sort(x_tilde), y = sort(y)), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = .5, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.1_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_linear_model, linewidth = .5, color = "blue") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.2_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_1_reproduced
Figure_2.1_reproduced
Figure_2.2_reproduced
# ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)
err_sd = 0.05
error <- rnorm(n, sd = err_sd)
# Setting temperature
temp <- beta_0 + rad + error
# Setting imperfect radiation observations
rad_tilde <- rad * abs(rad)
# Creating data frame
df <- data.frame(y = temp, x_tilde = rad_tilde, x = rad, t = 1:n)
# Fitting a linear model using INLA with temperature as the response and the imperfect radiation observation as the covariate
linear_model <- inla(y ~ 1 + x_tilde,
data = df,
control.compute = list(config = TRUE))
summary(linear_model)
# Fitting an AR(1) model using INLA with temperature as the response and an AR(1) process as the covariate
ar1_model <- inla(y ~ 1 + f(t, model = "ar1"),
data = df,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = F))))
summary(ar1_model)
# Fitting an AR(1) model using INLA with temperature as the response and an AR(1) process with marginal precision of 1/0.1 as the covariate
ar1_fixed_model <- inla(y ~ 1 + f(t, model = "ar1"),
data = df,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = T)))
)
summary(ar1_fixed_model)
df_linear_model <- data.frame(temp = linear_model$summary.fitted.values$"0.5quant", rad_tilde = linear_model$.args$data$x_tilde, t = 1:n)
df_ar1_model <- data.frame(temp = ar1_model$summary.fitted.values$"0.5quant", rad_tilde = ar1_model$.args$data$x_tilde, t = 1:n)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = sort(x_tilde), y = sort(y)), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = .5, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.1_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_linear_model, linewidth = .5, color = "blue") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.2_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_1_reproduced
Figure_2.1_reproduced
Figure_2.2_reproduced
# ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = x_tilde, y = y), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = .5, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.1_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_linear_model, linewidth = .5, color = "blue") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.2_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_1_reproduced
Figure_2.1_reproduced
Figure_2.2_reproduced
# ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)
# Total number of time points
n <- 2000
# Autocorrelation coefficient
rho <- .9
# Marginal variance and standard deviation
marg_var <- 1
marg_sd <- sqrt(marg_var)
# Epsilon variance and standard deviation
eps_var <- (1 - rho^2) * marg_var
eps_sd <- sqrt(eps_var)
# Intercept
beta_0 <- 30
set.seed(1234)
# Simulating radiation
rad <- c(arima.sim(list(order = c(1, 0, 0), ar = rho), n = n, sd = eps_sd))
# Error variance and standard deviation
err_var <- .1
err_sd <- sqrt(err_var)
# Simulating error terms
error <- rnorm(n, sd = err_sd)
# Setting temperature
temp <- beta_0 + rad + error
# Setting imperfect radiation observations
rad_tilde <- rad * abs(rad)
# Creating data frame
df <- data.frame(y = temp, x_tilde = rad_tilde, x = rad, t = 1:n)
# Fitting a linear model using INLA with temperature as the response and the imperfect radiation observation as the covariate
linear_model <- inla(y ~ 1 + x_tilde,
data = df,
control.compute = list(config = TRUE))
summary(linear_model)
# Fitting an AR(1) model using INLA with temperature as the response and an AR(1) process as the covariate
ar1_model <- inla(y ~ 1 + f(t, model = "ar1"),
data = df,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = F))))
summary(ar1_model)
# Fitting an AR(1) model using INLA with temperature as the response and an AR(1) process with marginal precision of 1/0.1 as the covariate
ar1_fixed_model <- inla(y ~ 1 + f(t, model = "ar1"),
data = df,
control.compute = list(config = TRUE),
control.family = list(hyper = list(prec = list(initial = log(1/0.1), fixed = T)))
)
summary(ar1_fixed_model)
df_linear_model <- data.frame(temp = linear_model$summary.fitted.values$"0.5quant", rad_tilde = linear_model$.args$data$x_tilde, t = 1:n)
df_ar1_model <- data.frame(temp = ar1_model$summary.fitted.values$"0.5quant", rad_tilde = ar1_model$.args$data$x_tilde, t = 1:n)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = x_tilde, y = y), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = .5, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.1_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_linear_model, linewidth = .5, color = "blue") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.2_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_1_reproduced
Figure_2.1_reproduced
Figure_2.2_reproduced
# ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = sort(x_tilde), y = sort(y)), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = .5, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.1_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_linear_model, linewidth = .5, color = "blue") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.2_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_1_reproduced
Figure_2.1_reproduced
Figure_2.2_reproduced
# ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)
Figure_1_reproduced <- ggplot(df) +
geom_point(aes(x = x_tilde, y = y), size = 2) +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_linear_model, linewidth = .5, color = "blue") +
geom_line(aes(x = sort(rad_tilde), y = sort(temp)), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = expression(tilde(X)[t]), y = expression(Y[t])) +
lims(x = c(-9, 9), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.1_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_linear_model, linewidth = .5, color = "blue") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_2.2_reproduced <- ggplot(df) +
geom_point(aes(x = t, y = y), size = 2) +
geom_line(aes(x = t, y = temp), data = df_ar1_model, linewidth = .5, color = "red") +
labs(x = "Time", y = expression(Y[t])) +
lims(x = c(0, 2000), y = c(25, 35)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
Figure_1_reproduced
Figure_2.1_reproduced
Figure_2.2_reproduced
# ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
# ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)
ggsave("Figs/2/2.2/1./Figure_1_reproduced.png", Figure_1_reproduced, width = 6, height = 4)
ggsave("Figs/2/2.2/1./Figure_2.1_reproduced.png", Figure_2.1_reproduced, width = 6, height = 4)
ggsave("Figs/2/2.2/1./Figure_2.2_reproduced.png", Figure_2.2_reproduced, width = 6, height = 4)

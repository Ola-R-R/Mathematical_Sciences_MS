---
output: 
  html_document: 
    fig_width: 5
    fig_height: 5
---

```{r setup, include=FALSE}}
knitr::opts_chunk$set(
	echo = TRUE,
	fig.align = "center",
	message = FALSE,
	warning = FALSE,
	tidy = TRUE,
	tidy.opts = list(width.cutoff = 60)
)
library(mnormt)
library(MASS)
library(ggplot2)
library(gridExtra)
library(forecast)
```

# 1 Metropolis-Hastings (MH) for bivariate densities

## 1.1 Plotting

```{r fig.width=10}
x1 <- seq(-5, 5, 0.1)
x2 <- seq(-5, 5, 0.1)
X <- data.frame(x1 = rep(x1, length(x2)), x2 = rep(x2, each = length(x1)))

target.density <- function(x, density, grad.log = F, plot = F) {
  if (density == "G") {
    
    mean <- c(0, 0)
    cov <- matrix(c(1, .9, .9, 1), nrow = 2)
    
    if (plot) {
      df <- data.frame(x, z = dmnorm(x, mean, cov))
      return(ggplot(df, aes(x1, x2)) +
               geom_raster(aes(fill = z), interpolate = T) +
               coord_fixed() +
               scale_fill_viridis_c() +
               guides(fill = guide_colourbar(label = F, ticks = F, barwidth = 0.5, barheight = 20)) +
               theme(text = element_text(size = 20), panel.background = element_blank()) +
               labs(fill = ""))
    }
    
    if (grad.log) {
      return(c(matrix(c(-1/.19, .9/.19, .9/.19, -1/.19), nrow = 2) %*% x))
    }
    
    return(dmnorm(x, mean, cov))
  }
  
  if (density == "M") {
    mean1 <- c(-1.5, -1.5)
    mean2 <- c(1.5, 1.5)
    mean3 <- c(-2, 2)
    sigma12 <- 1
    var1 <- diag(sigma12, 2)
    sigma22 <- 1
    var2 <- diag(sigma22, 2)
    sigma32 <- .8
    var3 <- diag(sigma32, 2)
    
    if (plot) {
      df <- data.frame(x, z = (dmnorm(x, mean1, var1) + dmnorm(x, mean2, var2) + dmnorm(x, mean3, var3))/3)
      return(ggplot(df, aes(x1, x2)) +
               geom_raster(aes(fill = z), interpolate = T) +
               coord_fixed() +
               scale_fill_viridis_c() +
               guides(fill = guide_colourbar(label = F, ticks = F, barwidth = 0.5, barheight = 20)) +
               theme(text = element_text(size = 20), panel.background = element_blank()) +
               labs(fill = ""))
    }
    
    if (grad.log) {
      return(-1/((dmnorm(x, mean1, var1) + dmnorm(x, mean2, var2) + dmnorm(x, mean3, var3))/3) * (dmnorm(x, mean1, var1) * 1/sigma12 * (x - mean1) + dmnorm(x, mean2, var2) * 1/sigma22 * (x - mean2) + dmnorm(x, mean3, var3) * 1/sigma32 * (x - mean3))/3)
    }
    
    return((dmnorm(x, mean1, var1) + dmnorm(x, mean2, var2) + dmnorm(x, mean3, var3))/3)
  }
  
  if (density == "V") {
    
    if (plot) {
      z <- numeric(nrow(x))
      for (i in 1:nrow(x)) {
        xtx <- t(as.numeric(x[i,])) %*% as.numeric(x[i,])
        z[i] <- (1/(2*pi) * exp(-1/2 * xtx) * (xtx + .25))
      }
      df <- data.frame(x, z = z)
      return(ggplot(df, aes(x1, x2)) +
               geom_raster(aes(fill = z), interpolate = T) +
               coord_fixed() +
               scale_fill_viridis_c() +
               guides(fill = guide_colourbar(label = F, ticks = F, barwidth = 0.5, barheight = 20)) +
               theme(text = element_text(size = 20), panel.background = element_blank()) +
               labs(fill = ""))
    }
    
    if (grad.log) {
      return((2/(as.numeric(t(x) %*% x) + .25) - 1) * x)
    }
    
    return(1/(2*pi) * exp(-1/2 * (t(x) %*% x)) * ((t(x) %*% x) + .25))
  }
}
```


```{r fig.width=10}
target.density(X, "G", plot = T)
target.density(X, "M", plot = T)
target.density(X, "V", plot = T)

# ggsave("Figs/Gaussian.png", plot1)
# ggsave("Figs/multimodal.png", plot2)
# ggsave("Figs/volcano.png", plot3)
```

```{r}
plotting.MH <- function(x) {
  plot1 <- ggplot(x, aes(x = iter, y = x1)) + geom_step() + ylim(-5, 5)
  plot2 <- ggplot(x, aes(x = iter, y = x2)) + geom_step() + ylim(-5, 5)
  plot3 <- ggplot(x) + geom_point(aes(x = x1, y = x2), size = .25) + coord_fixed() + xlim(-5, 5) + ylim(-5, 5)
  plot4 <- ggAcf(x[,2], lag.max = 50) + labs(y = "ACF x1", title = NULL)
  plot5 <- ggAcf(x[,3], lag.max = 50) + labs(y = "ACF x2", title = NULL)
  grid.arrange(plot1, plot2, plot3, plot4, plot5, layout_matrix = rbind(c(1, 3), c(2, 3), c(4, 5)))
}
```

```{r}
my.MCMC <- function(type, density, N, tuning.parameter, x0 = c(0, 0)) {
  X <- matrix(nrow = N + 1, ncol = 3)
  X[, 1] <- 0:N
  X[1, -1] <- x0
  accept <- numeric(N)
  
  for (i in 2:(N + 1)) {
    x <- X[i - 1, -1]
    
    if (type == "RW") {
      sigma <- tuning.parameter
      var <- diag(sigma^2, 2)
      y <- rmnorm(1, x, var)
    }
    
    if (type == "L") {
      sigma <- tuning.parameter
      var <- diag(sigma^2, 2)
      meanx <- x + sigma^2/2 * target.density(x, density, T)
      y <- rmnorm(1, meanx, var)
      meany <- y + sigma^2/2 * target.density(y, density, T)
    }
    
    if (type == "H") {
      n.steps <- tuning.parameter[1]
      step.size <- tuning.parameter[2]
      p <- rmnorm(1, varcov = diag(1,2))
      xold <- x
      for (j in 1:(n.steps/step.size + 1)) {
        p <- p + step.size/2 * target.density(xold, density, T)
        xnew <- xold + step.size * p
        p <- p + step.size/2 * target.density(xnew, density, T)
        xold <- xnew
      }
      y <- xnew
    }
    
    if (type == "RW" | type == "H") alpha <- min(1, target.density(y, density)/target.density(x, density))
    
    if (type == "L") alpha <- min(1, (target.density(y, density)/target.density(x, density)) * (dmnorm(x, meany, var)/dmnorm(y, meanx, var)))

    u <- runif(1)
    
    if (u <= alpha) {
      X[i, -1] <- y
      accept[i - 1] <- 1
    } else {
      X[i, -1] <- x
      accept[i - 1] <- 0
    }
  }
  accept.rate <- sum(accept)/N
  
  if (type == "RW" | type == "L") cat("Acceptance rate for sigma =", sigma, "is", accept.rate, "\n")
  
  if (type == "H") cat("Acceptance rate for T =", n.steps, "and epsilon =", step.size, "is", accept.rate, "\n")
  
  colnames(X) <- c("iter", "x1", "x2")
  return(list(samples = data.frame(X), accept.rate = accept.rate))
}
```

## 1.2 Random walk MH


### Gaussian

```{r}
rw.g.tuning.0.5 <- my.MCMC("RW", "G", 1e4, .5)
rw.g.tuning.1.3 <- my.MCMC("RW", "G", 1e4, 1.3)
```

```{r}
plotting.MH(rw.g.tuning.0.5$samples)
plotting.MH(rw.g.tuning.1.3$samples)
```

### Multimodal

```{r}
rw.m.tuning.0.5 <- my.MCMC("RW", "M", 1e4, .5)
rw.m.tuning.3.5 <- my.MCMC("RW", "M", 1e4, 3.5)
```

```{r}
plotting.MH(rw.m.tuning.0.5$samples)
plotting.MH(rw.m.tuning.3.5$samples)
```

### Volcano

```{r}
rw.v.tuning.0.5 <- my.MCMC("Random walk", "Volcano", 1e4, .5)
rw.v.tuning.3.3 <- my.MCMC("Random walk", "Volcano", 1e4, 3.3)
```

```{r}
plotting.MH(rw.v.tuning.0.5$samples)
plotting.MH(rw.v.tuning.3.3$samples)
```

## 1.3 Langevin MH

### Gaussian

```{r}
l.g.tuning.0.5 <- my.MCMC("Langevin", "Gaussian", 1e4, .5)
l.g.tuning.0.6 <- my.MCMC("Langevin", "Gaussian", 1e4, .6)
```

```{r}
plotting.MH(l.g.tuning.0.5$samples)
plotting.MH(l.g.tuning.0.6$samples)
```

### Multimodal

```{r}
l.m.tuning.0.5 <- my.MCMC("Langevin", "Multimodal", 1e4, .5)
l.m.tuning.1.5 <- my.MCMC("Langevin", "Multimodal", 1e4, 1.5)
```

```{r}
plotting.MH(l.m.tuning.0.5$samples)
plotting.MH(l.m.tuning.1.5$samples)
```

### Volcano

```{r}
l.v.tuning.0.5 <- my.MCMC("Langevin", "Volcano", 1e4, .5)
l.v.tuning.1.7 <- my.MCMC("Langevin", "Volcano", 1e4, 1.7)
```

```{r}
plotting.MH(l.v.tuning.0.5$samples)
plotting.MH(l.v.tuning.1.7$samples)
```

## 1.4 Hamiltonian MH

### Gaussian

```{r}
h.g.tuning.10_0.1 <- my.MCMC("H", "G", 1e4, c(10, .1))
h.g.tuning.10_0.05 <- my.MCMC("H", "G", 1e4, c(10, .05))
h.g.tuning.10_0.04 <- my.MCMC("H", "G", 1e4, c(10, .04))
h.g.tuning.10_0.03 <- my.MCMC("H", "G", 1e4, c(10, .03))
h.g.tuning.10_0.02 <- my.MCMC("H", "G", 1e4, c(10, .02))
```

```{r}
plotting.MH(h.g.tuning.10_0.1$samples)
plotting.MH(h.g.tuning.10_0.05$samples)
plotting.MH(h.g.tuning.10_0.04$samples)
plotting.MH(h.g.tuning.10_0.03$samples)
plotting.MH(h.g.tuning.10_0.02$samples)
```

### Multimodal

```{r}
h.m.tuning.10_0.1 <- my.MCMC("H", "M", 1e4, c(10, .1))
```

```{r}
plotting.MH(h.m.tuning.10_0.1$samples)
```

### Volcano

```{r}
h.v.tuning.10_0.1 <- my.MCMC("H", "V", 1e4, c(10, .1))
```

```{r}
plotting.MH(h.v.tuning.10_0.1$samples)
```

# 2 RStan: Gamma-Poisson Hierarchical model

```{r fig.height=50, fig.width=50}
library(rstan)
rstan_options(auto_write = TRUE)

pump_data <- list(
  Pump = 10,
  y = c(5,  1, 5,  14, 3,  19, 1, 1, 4, 22),
  t = c(94.3, 15.7, 62.9, 126.0, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
)

fit <- stan(
  file = "pump.stan",
  data = pump_data,
  chains = 10,
  warmup = 1000,
  iter = 2000,
  refresh = 1000,
  seed = 123
)

pairs(fit, condition = "accept_stat__")
```


```{r}
pairs(fit, pars = c("alpha", "beta", "lp__"), condition = "accept_stat__")

fit.adapt <- stan(
  file = "pump.stan",
  data = pump_data,
  chains = 4,
  warmup = 1000,
  iter = 2000,
  refresh = 1000,
  seed = 123,
  control = list(adapt_delta = 0.9)
)

summary(fit)$summary[, "n_eff"]

print(fit)
plot(fit)
plot(fit, pars = c("alpha", "beta", "lambda", "lambdat"))
traceplot(fit, pars = c("alpha", "beta", "lambda", "lambdat"), inc_warmup = T, nrow = 10)
library(bayesplot)
mcmc_hist(fit, pars = c("alpha", "beta"))

# look at the autocorrelations
mcmc_chain <- as.data.frame(fit)
alpha <- mcmc_chain[,"alpha"]
beta <- mcmc_chain[,"beta"]
lambda <- mcmc_chain[,"lambda"]
lambdat <- mcmc_chain[,"lambdat"]
acf(alpha)
acf(beta)
acf(lambda)
acf(lambdat)


# extract samples using extract function
samples <- extract(fit, permuted = TRUE) 
alpha.samples <- samples$alpha
beta.samples <- samples$beta
lambda.samples <- samples$lambda
lambdat.samples <- samples$lambdat

# choose directly mu and keep the four chains separated
# la <- extract(fit, pars = "mu", permuted = FALSE) 

```

legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(trace.x)
}
plot.acf <- function(x) {
acf.x <- ggAcf(x[,2], lag.max = 50) + labs(y = paste("ACF", colnames(x)[2]), title = NULL) +
ylim(-.2, 1) +
theme(
axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(acf.x)
}
h.g.fixed.T.10.accept.rates.plot <- plot.2d.accept.rate(h.g.fixed.T.10.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.fixed.T.10.accept.rates.plot.png", h.g.fixed.T.10.accept.rates.plot, width = 25, height = 20, unit = "cm")
h.g.accept.rates.plot <- plot.2d.accept.rate(h.g.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.accept.rates.plot.png", h.g.accept.rates.plot, width = 25, height = 20, unit = "cm")
plot.2d.accept.rate <- function(x, target) {
accept.rate.plot <- ggplot(x) +
geom_raster(aes(x = as.numeric(t), y = epsilon, fill = accept.rate), interpolate = F) +
scale_fill_viridis_c(limits = c(0, 1)) +
guides(fill = guide_colourbar(label = T, ticks = T, barwidth = 0.5, barheight = 20)) +
theme(text = element_text(size = 20), panel.background = element_blank()) +
labs(fill = "Acceptance \nRate") +
labs(y = expression(epsilon), x = "T") +
theme(
axis.text = element_text(size = 25, margin = unit(0.5, "cm")),
axis.title = element_text(size = 30),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
# legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(accept.rate.plot)
}
h.g.fixed.T.10.accept.rates.plot <- plot.2d.accept.rate(h.g.fixed.T.10.accept.rates, 0.8)
h.g.fixed.T.10.accept.rates.plot
h.g.accept.rates.plot <- plot.2d.accept.rate(h.g.accept.rates, 0.8)
h.g.accept.rates.plot
plotting.MH <- function(x) {
trace.x1 <- ggplot(x, aes(x = iter, y = x1)) + geom_step() + ylim(-5, 5)
trace.x2 <- ggplot(x, aes(x = iter, y = x2)) + geom_step() + ylim(-5, 5)
scatter.samples <- ggplot(x) + geom_point(aes(x = x1, y = x2), size = .25) + coord_fixed() + xlim(-5, 5) + ylim(-5, 5)
acf.x1 <- ggAcf(x[,2], lag.max = 50) + labs(y = "ACF x1", title = NULL)
acf.x2 <- ggAcf(x[,3], lag.max = 50) + labs(y = "ACF x2", title = NULL)
grid.arrange(trace.x1, trace.x2, scatter.samples, acf.x1, acf.x2, layout_matrix = rbind(c(1, 3), c(2, 3), c(4, 5)))
}
plot.samples <- function(x, dens) {
scatter.samples <- dens + geom_point(aes(x = x1, y = x2), x, color = "red", size = .25) + coord_fixed() +
lims(x = c(-5, 5), y = c(-5, 5)) +
guides(fill = guide_colourbar("", label = F, ticks = F, barwidth = 0.5, barheight = 20)) +
theme(
axis.text = element_text(size = 25, margin = unit(0.5, "cm")),
axis.title = element_blank(),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
)
return(scatter.samples)
}
plot.1d.accept.rate <- function(x, target) {
opt <- x$sigma[which.min(abs(x$accept.rate - target))]
accept.rate.plot <- ggplot(x) +
geom_step(aes(x = sigma, y = accept.rate)) +
# geom_hline(yintercept = target, color = "red") +
geom_segment(x = 0, xend = opt, y = target, yend = target, colour = "red") +
geom_segment(x = opt, xend = opt, y = 0, yend = target, colour = "red") +
geom_point(aes(x = opt, y = target), size = 2, color = "red") +
geom_text(aes(x = opt, y = target, label = paste("(", round(opt, 2), ",", target, ")")), size = 7, color = "red", hjust = 1.1, vjust = 1.5) +
ylim(0, 1) +
labs(x = expression(sigma), y = "Acceptance Rate") +
theme(
axis.text = element_text(size = 25, margin = unit(0.5, "cm")),
axis.title = element_text(size = 30),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(accept.rate.plot)
}
plot.2d.accept.rate <- function(x, target) {
accept.rate.plot <- ggplot(x) +
geom_raster(aes(x = as.factor(t), y = epsilon, fill = accept.rate), interpolate = F) +
scale_fill_viridis_c(limits = c(0, 1)) +
guides(fill = guide_colourbar(label = T, ticks = T, barwidth = 0.5, barheight = 20)) +
theme(text = element_text(size = 20), panel.background = element_blank()) +
labs(fill = "Acceptance \nRate") +
labs(y = expression(epsilon), x = "T") +
theme(
axis.text = element_text(size = 25, margin = unit(0.5, "cm")),
axis.title = element_text(size = 30),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
# legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(accept.rate.plot)
}
plot.trace <- function(x) {
name <- colnames(x)[2]
colnames(x) <- c("iter", "x")
trace.x <- ggplot(x, aes(x = iter, y = x)) + ylab(name) + geom_step() + ylim(-5, 5) +
theme(
axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(trace.x)
}
plot.acf <- function(x) {
acf.x <- ggAcf(x[,2], lag.max = 50) + labs(y = paste("ACF", colnames(x)[2]), title = NULL) +
ylim(-.2, 1) +
theme(
axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(acf.x)
}
plot.2d.accept.rate(h.g.fixed.T.10.accept.rates, 0.8)
plot.2d.accept.rate(h.g.accept.rates, 0.8)
plot.2d.accept.rate <- function(x, target) {
accept.rate.plot <- ggplot(x) +
geom_raster(aes(x = as.factor(t), y = as.factor(epsilon), fill = accept.rate), interpolate = F) +
scale_fill_viridis_c(limits = c(0, 1)) +
guides(fill = guide_colourbar(label = T, ticks = T, barwidth = 0.5, barheight = 20)) +
theme(text = element_text(size = 20), panel.background = element_blank()) +
labs(fill = "Acceptance \nRate") +
labs(y = expression(epsilon), x = "T") +
theme(
axis.text = element_text(size = 25, margin = unit(0.5, "cm")),
axis.title = element_text(size = 30),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
# legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
)
return(accept.rate.plot)
}
h.g.fixed.T.10.accept.rates.plot <- plot.2d.accept.rate(h.g.fixed.T.10.accept.rates, 0.8)
h.g.fixed.T.10.accept.rates.plot
plot.2d.accept.rate(h.g.accept.rates, 0.8)
h.g.fixed.T.10.accept.rates.plot <- plot.2d.accept.rate(h.g.fixed.T.10.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.fixed.T.10.accept.rates.plot.png", h.g.fixed.T.10.accept.rates.plot, width = 25, height = 20, unit = "cm")
h.g.accept.rates.plot <- plot.2d.accept.rate(h.g.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.accept.rates.plot.png", h.g.accept.rates.plot, width = 25, height = 20, unit = "cm")
h.g.tuning.10_0.05
h.g.fixed.T.10.accept.rates.plot <- plot.2d.accept.rate(h.g.fixed.T.10.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.fixed.T.10.accept.rates.plot.png", h.g.fixed.T.10.accept.rates.plot, width = 25, height = 20, unit = "cm")
h.g.accept.rates.plot <- plot.2d.accept.rate(h.g.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.accept.rates.plot.png", h.g.accept.rates.plot, width = 25, height = 20, unit = "cm")
h.g.tuning.10_0.1.samples.plot <- plot.samples(h.g.tuning.10_0.1$samples, G.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.tuning.10_0.1.samples.plot.png", h.g.tuning.10_0.1.samples.plot, width = 25, height = 25, unit = "cm")
h.g.tuning.10_0.05.samples.plot <- plot.samples(h.g.tuning.10_0.05$samples, G.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.tuning.10_0.05.samples.plot.png", h.g.tuning.10_0.05.samples.plot, width = 25, height = 25, unit = "cm")
h.g.tuning.10_0.1.trace.x1.plot <- plot.trace(h.g.tuning.10_0.1$samples[c("iter", "x1")])
h.g.tuning.10_0.1.trace.x2.plot <- plot.trace(h.g.tuning.10_0.1$samples[c("iter", "x2")])
h.g.tuning.10_0.1.trace.plot <- arrangeGrob(h.g.tuning.10_0.1.trace.x1.plot, h.g.tuning.10_0.1.trace.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.tuning.10_0.1.trace.plot.png", h.g.tuning.10_0.1.trace.plot, width = 25, height = 20, unit = "cm")
h.g.tuning.10_0.05.trace.x1.plot <- plot.trace(h.g.tuning.10_0.05$samples[c("iter", "x1")])
h.g.tuning.10_0.05.trace.x2.plot <- plot.trace(h.g.tuning.10_0.05$samples[c("iter", "x2")])
h.g.tuning.10_0.05.trace.plot <- arrangeGrob(h.g.tuning.10_0.05.trace.x1.plot, h.g.tuning.10_0.05.trace.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.tuning.10_0.05.trace.plot.png", h.g.tuning.10_0.05.trace.plot, width = 25, height = 20, unit = "cm")
h.g.tuning.10_0.1.acf.x1.plot <- plot.acf(h.g.tuning.10_0.1$samples[c("iter", "x1")])
h.g.tuning.10_0.1.acf.x2.plot <- plot.acf(h.g.tuning.10_0.1$samples[c("iter", "x2")])
h.g.tuning.10_0.1.acf.plot <- arrangeGrob(h.g.tuning.10_0.1.acf.x1.plot, h.g.tuning.10_0.1.acf.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.tuning.10_0.1.acf.plot.png", h.g.tuning.10_0.1.acf.plot, width = 25, height = 20, unit = "cm")
h.g.tuning.10_0.05.acf.x1.plot <- plot.acf(h.g.tuning.10_0.05$samples[c("iter", "x1")])
h.g.tuning.10_0.05.acf.x2.plot <- plot.acf(h.g.tuning.10_0.05$samples[c("iter", "x2")])
h.g.tuning.10_0.05.acf.plot <- arrangeGrob(h.g.tuning.10_0.05.acf.x1.plot, h.g.tuning.10_0.05.acf.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Gaussian/h.g.tuning.10_0.05.acf.plot.png", h.g.tuning.10_0.05.acf.plot, width = 25, height = 20, unit = "cm")
h.m.accept.rates <- data.frame(t = rep(1:10, each = 20), epsilon = seq(.05, 1, .05), accept.rate = 0)
for (i in 1:200) {
set.seed(123)
h.m.accept.rates$accept.rate[i] <- my.MCMC("H", "M", 1e3, c(h.m.accept.rates$t[i], h.m.accept.rates$epsilon[i]))$accept.rate
}
set.seed(123)
h.m.tuning.10_0.1 <- my.MCMC("H", "M", 1e2, c(10, .1))
set.seed(123)
h.g.tuning.10_0.1 <- my.MCMC("H", "G", 1e3, c(10, .1))
set.seed(123)
h.g.tuning.10_0.05 <- my.MCMC("H", "G", 1e3, c(10, .05))
set.seed(123)
h.m.tuning.10_0.1 <- my.MCMC("H", "M", 1e4, c(10, .1))
set.seed(123)
h.m.tuning.10_0.05 <- my.MCMC("H", "M", 1e4, c(10, .05))
h.m.accept.rates <- data.frame(t = rep(1:10, each = 20), epsilon = seq(.05, 1, .05), accept.rate = 0)
for (i in 1:200) {
set.seed(123)
h.m.accept.rates$accept.rate[i] <- my.MCMC("H", "M", 1e3, c(h.m.accept.rates$t[i], h.m.accept.rates$epsilon[i]))$accept.rate
}
plot.2d.accept.rate(h.m.accept.rates, 0.8)
plot.samples(h.m.tuning.10_0.1$samples, M.density.plot)
h.m.accept.rates.plot <- plot.2d.accept.rate(h.m.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.accept.rates.plot.png", h.m.accept.rates.plot, width = 25, height = 20, unit = "cm")
h.m.tuning.10_0.1.samples.plot <- plot.samples(h.m.tuning.10_0.1$samples, M.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.1.samples.plot.png", h.m.tuning.10_0.1.samples.plot, width = 25, height = 25, unit = "cm")
h.m.tuning.10_0.05.samples.plot <- plot.samples(h.m.tuning.10_0.05$samples, M.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.05.samples.plot.png", h.m.tuning.10_0.05.samples.plot, width = 25, height = 25, unit = "cm")
h.m.accept.rates.plot <- plot.2d.accept.rate(h.m.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.accept.rates.plot.png", h.m.accept.rates.plot, width = 25, height = 20, unit = "cm")
h.m.tuning.10_0.1.samples.plot <- plot.samples(h.m.tuning.10_0.1$samples, M.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.1.samples.plot.png", h.m.tuning.10_0.1.samples.plot, width = 25, height = 25, unit = "cm")
h.m.tuning.10_0.05.samples.plot <- plot.samples(h.m.tuning.10_0.05$samples, M.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.05.samples.plot.png", h.m.tuning.10_0.05.samples.plot, width = 25, height = 25, unit = "cm")
h.m.tuning.10_0.1.trace.x1.plot <- plot.trace(h.m.tuning.10_0.1$samples[c("iter", "x1")])
h.m.tuning.10_0.1.trace.x2.plot <- plot.trace(h.m.tuning.10_0.1$samples[c("iter", "x2")])
h.m.tuning.10_0.1.trace.plot <- arrangeGrob(h.m.tuning.10_0.1.trace.x1.plot, h.m.tuning.10_0.1.trace.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.1.trace.plot.png", h.m.tuning.10_0.1.trace.plot, width = 25, height = 20, unit = "cm")
h.m.tuning.10_0.05.trace.x1.plot <- plot.trace(h.m.tuning.10_0.05$samples[c("iter", "x1")])
h.m.tuning.10_0.05.trace.x2.plot <- plot.trace(h.m.tuning.10_0.05$samples[c("iter", "x2")])
h.m.tuning.10_0.05.trace.plot <- arrangeGrob(h.m.tuning.10_0.05.trace.x1.plot, h.m.tuning.10_0.05.trace.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.05.trace.plot.png", h.m.tuning.10_0.05.trace.plot, width = 25, height = 20, unit = "cm")
h.m.tuning.10_0.1.acf.x1.plot <- plot.acf(h.m.tuning.10_0.1$samples[c("iter", "x1")])
h.m.tuning.10_0.1.acf.x2.plot <- plot.acf(h.m.tuning.10_0.1$samples[c("iter", "x2")])
h.m.tuning.10_0.1.acf.plot <- arrangeGrob(h.m.tuning.10_0.1.acf.x1.plot, h.m.tuning.10_0.1.acf.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.1.acf.plot.png", h.m.tuning.10_0.1.acf.plot, width = 25, height = 20, unit = "cm")
h.m.tuning.10_0.05.acf.x1.plot <- plot.acf(h.m.tuning.10_0.05$samples[c("iter", "x1")])
h.m.tuning.10_0.05.acf.x2.plot <- plot.acf(h.m.tuning.10_0.05$samples[c("iter", "x2")])
h.m.tuning.10_0.05.acf.plot <- arrangeGrob(h.m.tuning.10_0.05.acf.x1.plot, h.m.tuning.10_0.05.acf.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Multimodal/h.m.tuning.10_0.05.acf.plot.png", h.m.tuning.10_0.05.acf.plot, width = 25, height = 20, unit = "cm")
set.seed(123)
h.v.tuning.10_0.1 <- my.MCMC("H", "V", 1e4, c(10, .1))
set.seed(123)
h.v.tuning.10_0.05 <- my.MCMC("H", "V", 1e4, c(10, .05))
h.v.accept.rate <- data.frame(t = rep(1:10, each = 20), epsilon = seq(.05, 1, .05), accept.rate = 0)
for (i in 1:200) {
set.seed(123)
h.v.accept.rate$accept.rate[i] <- my.MCMC("H", "V", 1e3, c(h.v.accept.rate$t[i], h.v.accept.rate$epsilon[i]))$accept.rate
}
plot.2d.accept.rate(h.v.accept.rate, 0.8)
plot.samples(h.v.tuning.10_0.1$samples, V.density.plot)
h.v.accept.rate.plot <- plot.2d.accept.rate(h.v.accept.rate, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.accept.rate.plot.png", h.v.accept.rate.plot, width = 25, height = 20, unit = "cm")
h.v.tuning.10_0.1.samples.plot <- plot.samples(h.v.tuning.10_0.1$samples, V.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.tuning.10_0.1.samples.plot.png", h.v.tuning.10_0.1.samples.plot, width = 25, height = 25, unit = "cm")
h.v.tuning.10_0.05.samples.plot <- plot.samples(h.v.tuning.10_0.05$samples, V.density.plot)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.tuning.10_0.05.samples.plot.png", h.v.tuning.10_0.05.samples.plot, width = 25, height = 25, unit = "cm")
h.v.tuning.10_0.1.trace.x1.plot <- plot.trace(h.v.tuning.10_0.1$samples[c("iter", "x1")])
h.v.tuning.10_0.1.trace.x2.plot <- plot.trace(h.v.tuning.10_0.1$samples[c("iter", "x2")])
h.v.tuning.10_0.1.trace.plot <- arrangeGrob(h.v.tuning.10_0.1.trace.x1.plot, h.v.tuning.10_0.1.trace.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.tuning.10_0.1.trace.plot.png", h.v.tuning.10_0.1.trace.plot, width = 25, height = 20, unit = "cm")
h.v.tuning.10_0.05.trace.x1.plot <- plot.trace(h.v.tuning.10_0.05$samples[c("iter", "x1")])
h.v.tuning.10_0.05.trace.x2.plot <- plot.trace(h.v.tuning.10_0.05$samples[c("iter", "x2")])
h.v.tuning.10_0.05.trace.plot <- arrangeGrob(h.v.tuning.10_0.05.trace.x1.plot, h.v.tuning.10_0.05.trace.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.tuning.10_0.05.trace.plot.png", h.v.tuning.10_0.05.trace.plot, width = 25, height = 20, unit = "cm")
h.v.tuning.10_0.1.acf.x1.plot <- plot.acf(h.v.tuning.10_0.1$samples[c("iter", "x1")])
h.v.tuning.10_0.1.acf.x2.plot <- plot.acf(h.v.tuning.10_0.1$samples[c("iter", "x2")])
h.v.tuning.10_0.1.acf.plot <- arrangeGrob(h.v.tuning.10_0.1.acf.x1.plot, h.v.tuning.10_0.1.acf.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.tuning.10_0.1.acf.plot.png", h.v.tuning.10_0.1.acf.plot, width = 25, height = 20, unit = "cm")
h.v.tuning.10_0.05.acf.x1.plot <- plot.acf(h.v.tuning.10_0.05$samples[c("iter", "x1")])
h.v.tuning.10_0.05.acf.x2.plot <- plot.acf(h.v.tuning.10_0.05$samples[c("iter", "x2")])
h.v.tuning.10_0.05.acf.plot <- arrangeGrob(h.v.tuning.10_0.05.acf.x1.plot, h.v.tuning.10_0.05.acf.x2.plot, nrow = 2)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.tuning.10_0.05.acf.plot.png", h.v.tuning.10_0.05.acf.plot, width = 25, height = 20, unit = "cm")
h.m.accept.rates <- h.m.accept.rate
h.v.accept.rates <- h.v.accept.rate
h.v.accept.rates
h.v.accept.rates.plot <- plot.2d.accept.rate(h.v.accept.rates, 0.8)
ggsave("Figs/Problem 1/Hamiltonian/Volcano/h.v.accept.rates.plot.png", h.v.accept.rates.plot, width = 25, height = 20, unit = "cm")
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
message = FALSE,
warning = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff = 60)
)
library(mnormt)
library(MASS)
library(ggplot2)
library(plotly)
library(rayshader)
library(gridExtra)
library(forecast)
library(viridis)
library(plot3D)
library(rstan)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
pump_data <- list(
Pump = 10,
y = c(5,  1, 5,  14, 3,  19, 1, 1, 4, 22),
t = c(94.3, 15.7, 62.9, 126.0, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
library(rstan)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
pump_data <- list(
Pump = 10,
y = c(5,  1, 5,  14, 3,  19, 1, 1, 4, 22),
t = c(94.3, 15.7, 62.9, 126.0, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
install.packages("rstudioapi")
library(rstanarm)
library(rstudioapi)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
pump_data <- list(
Pump = 10,
y = c(5,  1, 5,  14, 3,  19, 1, 1, 4, 22),
t = c(94.3, 15.7, 62.9, 126.0, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
print(fit)
library(rstan)
library(bayesplot)
library(rstudioapi)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
pump_data <- list(
Pump = 10,
y = c(5,  1, 5,  14, 3,  19, 1, 1, 4, 22),
t = c(94.3, 15.7, 62.9, 126.0, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
print(fit)
stargazer(fit, type = "html", out = "fit_lm.html")
install.packages("stargazer")
library(stargazer)
stargazer(fit, type = "html", out = "fit_lm.html")
fit
data <- as.data.frame(cbind(a = rnorm(30), b = rnorm(30)))
fit_lm <- lm(data, formula = a ~ b)
fit_lm
fit
As.mcmc.list(fit)
As.mcmc.list(fit)$lambda
View(fit)
View(fit_lm)
?stargazer
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
fit
print(fit)
summary(fit)
summary(fit)$summary
print(fit)
summary(fit)$summary
print(fit)
0.06 * 94.3
15.7*.1
.1/1
1/1
1/0.1
0.1/1
summary(fit)$summary
stan_hist(fit, pars = "lp__", bins = 30)
plot(fit, "trace", pars = "alpha")
plot(fit, pars = c("alpha", "lp__"), prob = 0.5, prob_outer = 0.9)
pairs(fit, pars = c("lp__"), condition = "accept_stat__")
traceplot(fit, pars = c("lambda", "lambdat", "alpha", "beta", "lp__"), inc_warmup = T, ncol = 5)
install.packages("ragg")
traceplot(fit, pars = c("lambda", "lambdat", "alpha", "beta", "lp__"), inc_warmup = T, ncol = 5)
?traceplot
traceplot.All <- traceplot(fit, pars = c("lambda", "lambdat", "alpha", "beta", "lp__"), inc_warmup = T, ncol = 5)
ggsave("Figs/Problem 2/pump.traceplot.All.png", traceplot.All, width = 25, height = 20, unit = "cm")
ggsave("Figs/Problem 2/pump.traceplot.All.png", traceplot.All, width = 25, height = 15, unit = "cm")
ggsave("Figs/Problem 2/pump.traceplot.All.png", traceplot.All, width = 25, height = 18, unit = "cm")
library(rstan)
library(bayesplot)
library(rstudioapi)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
pump_data <- list(
Pump = 10,
y = c(5,  1, 5,  14, 3,  19, 1, 1, 4, 22),
t = c(94.3, 15.7, 62.9, 126.0, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 20000,
refresh = 1000,
seed = 123
)
print(fit)
library(rstan)
library(bayesplot)
library(rstudioapi)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
pump_data <- list(
Pump = 10,
y = c(5,  1, 5,  14, 3,  19, 1, 1, 4, 22),
t = c(94.3, 15.7, 62.9, 126.0, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
)
fit <- stan(
file = "pump.stan",
data = pump_data,
chains = 10,
warmup = 1000,
iter = 2000,
refresh = 1000,
seed = 123
)
print(fit)

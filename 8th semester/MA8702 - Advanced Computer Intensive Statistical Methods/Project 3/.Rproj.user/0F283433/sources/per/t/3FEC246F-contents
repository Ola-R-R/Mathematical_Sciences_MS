# Setup

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(MASS)
library(tidyverse)
library(ggplot2)
library(mnormt)
library(mvtnorm)
library(viridis)
```

# Import data

```{r}
sensorA <- read.csv("sensorA.txt", F)
sensorB <- read.csv("sensorB.txt", F)
sensor <- cbind(sensorA, sensorB)
colnames(sensor) <- c("A", "B")
sensor <- as.matrix(sensor)
```

# Function for plotting the estimates

```{r}
plot_est_fun <- function(estimates) {
  df <- data.frame(estimates$mu)
  colnames(df) <- c("E", "N", "v", "u")
  df <- df %>% mutate(w = sqrt(df$v^2 + df$u^2), t = 1:nrow(df))
  
  p1 <- ggplot(df) +
    geom_point(aes(E, N, color = w), size = 2) +
    geom_point(aes(x = 0, y = 0), size = 2, color = "red") +
    geom_text(aes(x = 0, y = 0, label = "Sensor A"), size = 6, hjust = .5, vjust = -2) +
    geom_point(aes(x = 40, y = 40), size = 2, color = "red") +
    geom_text(aes(x = 40, y = 40, label = "Sensor B"), size = 6, hjust = .5, vjust = -2) +
    geom_label(aes(x = 0, y = 40, label = paste("Running time:", round(estimates$time, 3), "secs")), size = 6, hjust = 0, vjust = .5, alpha = .5) +
    coord_fixed() +
    scale_color_viridis_c("Speed", limits = c(8, 32)) +
    lims(x = c(-5, 45), y = c(-5, 45))
  lower_95_CI_df <- data.frame(x = numeric(nrow(df)), y = numeric(nrow(df)), w = df$w)
  upper_95_CI_df <- data.frame(x = numeric(nrow(df)), y = numeric(nrow(df)), w = df$w)
  
  for (i in 1:nrow(df)) {
    lower_95_CI_df$x[i] <- df$E[i] - qnorm(.975) * sqrt(estimates$Sigma[[i]][1, 1])
    lower_95_CI_df$y[i] <- df$N[i] - qnorm(.975) * sqrt(estimates$Sigma[[i]][2, 2])
    upper_95_CI_df$x[i] <- df$E[i] + qnorm(.975) * sqrt(estimates$Sigma[[i]][1, 1])
    upper_95_CI_df$y[i] <- df$N[i] + qnorm(.975) * sqrt(estimates$Sigma[[i]][2, 2])
  }
  
  p1 <- p1 + geom_path(aes(x = x, y = y, color = w), lower_95_CI_df, lineend = "round", linewidth = 1.5) +
    geom_path(aes(x = x, y = y, color = w), upper_95_CI_df, lineend = "round", linewidth = 1.5) +
    guides(color = guide_colorbar(label = T, ticks = F, barwidth = 1, barheight = 20)) +
    theme(axis.text = element_text(size = 25, margin = unit(0.5, "cm")),
             axis.title = element_blank(),
             legend.title = element_text(size = 15),
             legend.text = element_text(size = 14),
             # legend.position = "none",
             axis.line = element_line(colour = "black"),
             axis.ticks = element_line(linewidth = 1),
             axis.ticks.length = unit(0.3, "cm"),
             # panel.background = element_blank(),
             # panel.grid.major = element_blank(),
             # panel.grid.minor = element_blank(),
           )
  
  # x1 <- seq(-5, 45, 0.1)
  # x2 <- seq(-5, 45, 0.1)
  # colors_vector <- viridis(50)
  # for (i in 1:nrow(df)) {
  #   z <- outer(x1, x2, function(x, y) dmvnorm(cbind(x,y), estimates$mu[i,1:2], estimates$Sigma[[i]][1:2, 1:2]))
  #   df2 <- data.frame(x1 = rep(x1, length(x2)), x2 = rep(x2, each = length(x1)), z = as.vector(z))
  #   
  #   p1 <- p1 + geom_contour(aes(x1, x2, z = z), df2, color = colors_vector[which(df$w[i] == sort(df$w))], alpha = .5, linewidth = .3, bins = 2)
  # }
  
  return(p1)
}
```

# Model

```{r}
mu_1 <- c(10, 30, 10, -10)
Q_1 <- diag(c(10^2, 10^2, 5^2, 5^2), 4, 4)
delta <- 1/60
A <- diag(1, 4, 4)
A[1, 3] <- A[2, 4] <- delta
Q_t <- diag(c(0.1^2, 0.1^2, 0.5^2, 0.5^2), 4, 4)
h <- function(x) {
  E_t <- x[1]
  N_t <- x[2]
  return(c(atan(E_t/N_t), atan((40 - N_t)/(40 - E_t))))
}
jacobian_H <- function(x) {
  E_t <- x[1]
  N_t <- x[2]
  J <- matrix(0, 2, 4)
  J[1, 1] <- N_t/(E_t^2 + N_t^2)
  J[1, 2] <- -E_t/(E_t^2 + N_t^2)
  J[2, 1] <- (40 - N_t)/(N_t^2 - 80*N_t + E_t^2 + 3200 - 80*E_t)
  J[2, 2] <- -(40 - E_t)/(N_t^2 - 80*N_t + E_t^2 + 3200 - 80*E_t)
  return(J)
}
R_t <- diag(c(.1^2, .1^2), 2, 2)
```

# Extended Kalman Filter

```{r}
EKF <- function(y, mu_1, Q_1, A, Q_t, R_t){
  start.time <- Sys.time()
  # Initialize
  tilde_mu <- matrix(NA, nrow(y) + 1, 4)
  hat_mu <- matrix(NA, nrow(y), 4)
  tilde_Sigma <- list()
  hat_Sigma <- list()
  tilde_mu[1,] <- mu_1
  tilde_Sigma[[1]] <- Q_1
  
  for (i in 1:nrow(y)) {
    # Update step
    S <- jacobian_H(tilde_mu[i,]) %*% tilde_Sigma[[i]] %*% t(jacobian_H(tilde_mu[i,])) + R_t
    K <- tilde_Sigma[[i]] %*% t(jacobian_H(tilde_mu[i,])) %*% solve(S)
    hat_mu[i,] <- tilde_mu[i,] + K %*% (y[i,] - h(tilde_mu[i,]))
    hat_Sigma[[i]] <- tilde_Sigma[[i]] - K %*% jacobian_H(tilde_mu[i,]) %*% tilde_Sigma[[i]]
    
    # Prediction step
    tilde_mu[i + 1,] <- A %*% hat_mu[i,]
    tilde_Sigma[[i + 1]] <- A %*% hat_Sigma[[i]] %*% t(A) + Q_t
  }
  end.time <- Sys.time()
  time.taken <- end.time - start.time
  return(list(mu = hat_mu, Sigma = hat_Sigma,  time = time.taken))
}

EKF_mu_Sigma <- EKF(sensor, mu_1, Q_1, A, Q_t, R_t)

EKF_mu_Sigma_plot <- plot_est_fun(EKF_mu_Sigma)
EKF_mu_Sigma_plot

# ggsave("Figs/Extended_Kalman_Filter.png", EKF_mu_Sigma_plot, width = 25, height = 25, unit = "cm")
```

# Particle Filter

```{r}
PF <- function(y, mu_1, Q_1, A, Q_t, R_t, n_particles) {
  start.time <- Sys.time()
  # Initialize
  set.seed(10)
  particles <- list()
  mu <- matrix(NA, nrow(y), 4)
  Sigma <- list()
  reset_weight <- rep(1/n_particles, n_particles)
  
  w_sum <- 0
  particles[[1]] <- cbind(rmvnorm(n_particles, mu_1, Q_1), reset_weight)
  particles[[1]][, 5] <- particles[[1]][, 5] * dmvnorm(y[1,], h(particles[[1]][, 1:4]), R_t)
  w_sum <- w_sum + sum(particles[[1]][, 5])
  particles[[1]][, 5] <- particles[[1]][, 5] / w_sum
  sample_indices <- sample(1:n_particles, n_particles, replace = TRUE, prob = particles[[1]][, 5])
  particles[[1]][, 1:4] <- particles[[1]][sample_indices, 1:4]
  particles[[1]][, 5] <- reset_weight
  mu[1,] <- colSums(particles[[1]][, 1:4] * particles[[1]][, 5])
  Sigma[[1]] <- cov(particles[[1]][, 1:4] * particles[[1]][, 5])
  
  for (i in 2:nrow(y)) {
    particles[[i]] <- matrix(NA, n_particles, 5)
    w_sum <- 0
    for (j in 1:n_particles) {
      particles[[i]][j, 1:4] <- mvrnorm(1, A %*% particles[[i - 1]][j, 1:4], Q_t)
      particles[[i]][j, 5] <- particles[[i - 1]][j, 5] * dmvnorm(y[i,], h(particles[[i]][j, 1:4]), R_t)
      w_sum <- w_sum + particles[[i]][j, 5]
    }
    particles[[i]][, 5] <- particles[[i]][, 5] / w_sum
    sample_indices <- sample(1:n_particles, n_particles, replace = TRUE, prob = particles[[i]][, 5])
    particles[[i]][, 1:4] <- particles[[i]][sample_indices, 1:4]
    particles[[i]][, 5] <- reset_weight
    mu[i,] <- colSums(particles[[i]][, 1:4] * particles[[i]][, 5])
    Sigma[[i]] <- matrix(0, 4, 4)
  }
  end.time <- Sys.time()
  time.taken <- end.time - start.time
  return(list(mu = mu, Sigma = Sigma, time = time.taken))
}

PF_mu_Sigma_particles_10000 <- PF(sensor, mu_1, Q_1, A, Q_t, R_t, 10000)

PF_mu_Sigma_particles_10000_plot <- plot_est_fun(PF_mu_Sigma_particles_10000)
PF_mu_Sigma_particles_10000_plot

PF_mu_Sigma_particles_100 <- PF(sensor, mu_1, Q_1, A, Q_t, R_t, 100)

PF_mu_Sigma_particles_100_plot <- plot_est_fun(PF_mu_Sigma_particles_100)
PF_mu_Sigma_particles_100_plot

# ggsave("Figs/Particle_Filter_10000.png", PF_mu_Sigma_particles_10000_plot, width = 25, height = 25, unit = "cm")
# ggsave("Figs/Particle_Filter_100.png", PF_mu_Sigma_particles_100_plot, width = 25, height = 25, unit = "cm")
```

# Ensemble Kalman Filter

```{r}
EnKF <- function(y, mu_1, Q_1, A, Q_t, R_t, ensemble_size) {
  start.time <- Sys.time()
  # Initialize
  set.seed(10)
  ensemble <- list()
  mu <- matrix(NA, nrow(y), 4)
  Sigma <- list()
  
  ensemble[[1]] <- list()
  ensemble[[1]]$mu_tilde <- matrix(NA, ensemble_size, 4)
  for (i in 1:ensemble_size) {
    ensemble[[1]]$mu_tilde[i,] <- mvrnorm(1, A %*% mu_1, Q_1)
  }
  ensemble[[1]]$y <- matrix(NA, ensemble_size, 2)
  for (i in 1:ensemble_size) {
    ensemble[[1]]$y[i,] <- mvrnorm(1, h(ensemble[[1]]$mu_tilde[i,]), R_t)
  }
  ensemble[[1]]$Sigma_y <- 0
  for (i in 1:ensemble_size) {
    ensemble[[1]]$Sigma_y <- ensemble[[1]]$Sigma_y + (ensemble[[1]]$y[i,] - colMeans(ensemble[[1]]$y)) %*% t(ensemble[[1]]$y[i,] - colMeans(ensemble[[1]]$y))
  }
  ensemble[[1]]$Sigma_y <- ensemble[[1]]$Sigma_y / ensemble_size
  ensemble[[1]]$Sigma_xy <- 0
  for (i in 1:ensemble_size) {
    ensemble[[1]]$Sigma_xy <- ensemble[[1]]$Sigma_xy + (ensemble[[1]]$mu_tilde[i,] - colMeans(ensemble[[1]]$mu_tilde)) %*% t(ensemble[[1]]$y[i,] - colMeans(ensemble[[1]]$y))
  }
  ensemble[[1]]$Sigma_xy <- ensemble[[1]]$Sigma_xy / ensemble_size
  ensemble[[1]]$K <- ensemble[[1]]$Sigma_xy %*% solve(ensemble[[1]]$Sigma_y)
  ensemble[[1]]$mu_hat <- matrix(NA, ensemble_size, 4)
  for (i in 1:ensemble_size) {
    ensemble[[1]]$mu_hat[i,] <- ensemble[[1]]$mu_tilde[i,] + ensemble[[1]]$K %*% (y[1,] - ensemble[[1]]$y[i,])
  }
  mu[1,] <- apply(ensemble[[1]]$mu_hat, 2, median)
  Sigma[[1]] <- cov(ensemble[[1]]$mu_hat)
  
  for (i in 2:nrow(y)) {
    ensemble[[i]] <- list()
    ensemble[[i]]$mu_tilde <- matrix(NA, ensemble_size, 4)
    for (j in 1:ensemble_size) {
      ensemble[[i]]$mu_tilde[j,] <- mvrnorm(1, A %*% ensemble[[i - 1]]$mu_hat[j,], Q_t)
    }
    ensemble[[i]]$y <- matrix(NA, ensemble_size, 2)
    for (j in 1:ensemble_size) {
      ensemble[[i]]$y[j,] <- mvrnorm(1, h(ensemble[[i]]$mu_tilde[j,]), R_t)
    }
    ensemble[[i]]$Sigma_y <- 0
    for (j in 1:ensemble_size) {
      ensemble[[i]]$Sigma_y <- ensemble[[i]]$Sigma_y + (ensemble[[i]]$y[j,] - colMeans(ensemble[[i]]$y)) %*% t(ensemble[[i]]$y[j,] - colMeans(ensemble[[i]]$y))
    }
    ensemble[[i]]$Sigma_y <- ensemble[[i]]$Sigma_y / ensemble_size
    ensemble[[i]]$Sigma_xy <- 0
    for (j in 1:ensemble_size) {
      ensemble[[i]]$Sigma_xy <- ensemble[[i]]$Sigma_xy + (ensemble[[i]]$mu_tilde[j,] - colMeans(ensemble[[i]]$mu_tilde)) %*% t(ensemble[[i]]$y[j,] - colMeans(ensemble[[i]]$y))
    }
    ensemble[[i]]$Sigma_xy <- ensemble[[i]]$Sigma_xy / ensemble_size
    ensemble[[i]]$K <- ensemble[[i]]$Sigma_xy %*% solve(ensemble[[i]]$Sigma_y)
    ensemble[[i]]$mu_hat <- matrix(NA, ensemble_size, 4)
    for (j in 1:ensemble_size) {
      ensemble[[i]]$mu_hat[j,] <- ensemble[[i]]$mu_tilde[j,] + ensemble[[i]]$K %*% (y[i,] - ensemble[[i]]$y[j,])
    }
    mu[i,] <- apply(ensemble[[i]]$mu_hat, 2, median)
    Sigma[[i]] <- cov(ensemble[[i]]$mu_hat)
  }
  end.time <- Sys.time()
  time.taken <- end.time - start.time
  return(list(mu = mu, Sigma = Sigma, time = time.taken))
}

EnKF_mu_Sigma_ensemble_1000 <- EnKF(sensor, mu_1, Q_1, A, Q_t, R_t, 1000)

EnKF_mu_Sigma_ensemble_1000_plot <- plot_est_fun(EnKF_mu_Sigma_ensemble_1000)
EnKF_mu_Sigma_ensemble_1000_plot

EnKF_mu_Sigma_ensemble_100 <- EnKF(sensor, mu_1, Q_1, A, Q_t, R_t, 100)

EnKF_mu_Sigma_ensemble_100_plot <- plot_est_fun(EnKF_mu_Sigma_ensemble_100)
EnKF_mu_Sigma_ensemble_100_plot

# ggsave("Figs/Ensemble_Kalman_Filter_1000.png", EnKF_mu_Sigma_ensemble_1000_plot, width = 25, height = 25, unit = "cm")
# ggsave("Figs/Ensemble_Kalman_Filter_100.png", EnKF_mu_Sigma_ensemble_100_plot, width = 25, height = 25, unit = "cm")
```


y <- as.matrix(gen_p[i,])
df[df$parent == i,c("x", "y")] <- mvrnorm(n_c[i], y, sigma2 * diag(1, 2, 2))
}
df <- df[,c("x", "y")]
df <- df[order(df$x, df$y),]
rownames(df) <- NULL
df <- df[df$x >= original_area["xl"] & df$x <= original_area["xu"] & df$y >= original_area["yl"] & df$y <= original_area["yu"],]
return(df)
}
guestimate_Neymann_Scott_L_plot <- function(data, n, lambda_p, lambda_d, sigma2, dist = .2, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Neyman_Scott_pp(data, lambda_p, lambda_d, sigma2, seed[i], dist = dist)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.05^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
lambda_p_10_lambda_d_5_sigma2_0.025.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.025^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.025.2_dist_0.2_Neymann_Scott_L_plot
sim_Neyman_Scott_pp <- function(data, lambda_p, lambda_d, sigma2, seed, dist = .2) {
original_area <- data$area
data$area <- c(data$area[1] - dist, data$area[2] + dist, data$area[3] - dist, data$area[4] + dist)
total_area <- as.numeric((data$area[2] - data$area[1]) * (data$area[4] - data$area[3]))
set.seed(seed)
n_p <- rpois(1, lambda_p * total_area)
gen_p_x <- runif(n_p, data$area[1], data$area[2])
gen_p_y <- runif(n_p, data$area[3], data$area[4])
gen_p <- data.frame(x = gen_p_x, y = gen_p_y)
gen_p <- gen_p[order(gen_p$x, gen_p$y),]
rownames(gen_p) <- NULL
n_c <- rpois(n_p, lambda_d)
df <- data.frame(parent = rep(as.numeric(rownames(gen_p)), n_c), x = numeric(sum(n_c)), y = numeric(sum(n_c)))
for (i in unique(df$parent)) {
y <- as.matrix(gen_p[i,])
df[df$parent == i,c("x", "y")] <- mvrnorm(n_c[i], y, sigma2 * diag(1, 2, 2))
}
df <- df[,c("x", "y")]
df <- df[order(df$x, df$y),]
rownames(df) <- NULL
df <- df[df$x >= original_area["xl"] & df$x <= original_area["xu"] & df$y >= original_area["yl"] & df$y <= original_area["yu"],]
return(df)
}
guestimate_Neymann_Scott_L_plot <- function(data, n, lambda_p, lambda_d, sigma2, dist = .2, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Neyman_Scott_pp(data, lambda_p, lambda_d, sigma2, seed[i], dist = dist)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.05^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
lambda_p_10_lambda_d_5_sigma2_0.03.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.03^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.03.2_dist_0.2_Neymann_Scott_L_plot
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.075^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot
sim_Neyman_Scott_pp <- function(data, lambda_p, lambda_d, sigma2, seed, dist = .2) {
original_area <- data$area
data$area <- c(data$area[1] - dist, data$area[2] + dist, data$area[3] - dist, data$area[4] + dist)
total_area <- as.numeric((data$area[2] - data$area[1]) * (data$area[4] - data$area[3]))
set.seed(seed)
n_p <- rpois(1, lambda_p * total_area)
gen_p_x <- runif(n_p, data$area[1], data$area[2])
gen_p_y <- runif(n_p, data$area[3], data$area[4])
gen_p <- data.frame(x = gen_p_x, y = gen_p_y)
gen_p <- gen_p[order(gen_p$x, gen_p$y),]
rownames(gen_p) <- NULL
n_c <- rpois(n_p, lambda_d)
df <- data.frame(parent = rep(as.numeric(rownames(gen_p)), n_c), x = numeric(sum(n_c)), y = numeric(sum(n_c)))
for (i in unique(df$parent)) {
y <- as.matrix(gen_p[i,])
df[df$parent == i,c("x", "y")] <- mvrnorm(n_c[i], y, sigma2 * diag(1, 2, 2))
}
df <- df[,c("x", "y")]
df <- df[order(df$x, df$y),]
rownames(df) <- NULL
df <- df[df$x >= original_area["xl"] & df$x <= original_area["xu"] & df$y >= original_area["yl"] & df$y <= original_area["yu"],]
return(df)
}
guestimate_Neymann_Scott_L_plot <- function(data, n, lambda_p, lambda_d, sigma2, dist = .2, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Neyman_Scott_pp(data, lambda_p, lambda_d, sigma2, seed[i], dist = dist)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.05^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.075^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot
lambda_p_10_lambda_d_5_sigma2_0.08.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.08^2, dist = .2)
sim_Neyman_Scott_pp <- function(data, lambda_p, lambda_d, sigma2, seed, dist = .2) {
original_area <- data$area
data$area <- c(data$area[1] - dist, data$area[2] + dist, data$area[3] - dist, data$area[4] + dist)
total_area <- as.numeric((data$area[2] - data$area[1]) * (data$area[4] - data$area[3]))
set.seed(seed)
n_p <- rpois(1, lambda_p * total_area)
gen_p_x <- runif(n_p, data$area[1], data$area[2])
gen_p_y <- runif(n_p, data$area[3], data$area[4])
gen_p <- data.frame(x = gen_p_x, y = gen_p_y)
gen_p <- gen_p[order(gen_p$x, gen_p$y),]
rownames(gen_p) <- NULL
n_c <- rpois(n_p, lambda_d)
df <- data.frame(parent = rep(as.numeric(rownames(gen_p)), n_c), x = numeric(sum(n_c)), y = numeric(sum(n_c)))
for (i in unique(df$parent)) {
y <- as.matrix(gen_p[i,])
df[df$parent == i,c("x", "y")] <- mvrnorm(n_c[i], y, sigma2 * diag(1, 2, 2))
}
df <- df[,c("x", "y")]
df <- df[order(df$x, df$y),]
rownames(df) <- NULL
df <- df[df$x >= original_area["xl"] & df$x <= original_area["xu"] & df$y >= original_area["yl"] & df$y <= original_area["yu"],]
return(df)
}
guestimate_Neymann_Scott_L_plot <- function(data, n, lambda_p, lambda_d, sigma2, dist = .2, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Neyman_Scott_pp(data, lambda_p, lambda_d, sigma2, seed[i], dist = dist)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.05^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.075^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot
lambda_p_10_lambda_d_5_sigma2_0.08.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.08^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.08.2_dist_0.2_Neymann_Scott_L_plot
sim_Neyman_Scott_pp <- function(data, lambda_p, lambda_d, sigma2, seed, dist = .2) {
original_area <- data$area
data$area <- c(data$area[1] - dist, data$area[2] + dist, data$area[3] - dist, data$area[4] + dist)
total_area <- as.numeric((data$area[2] - data$area[1]) * (data$area[4] - data$area[3]))
set.seed(seed)
n_p <- rpois(1, lambda_p * total_area)
gen_p_x <- runif(n_p, data$area[1], data$area[2])
gen_p_y <- runif(n_p, data$area[3], data$area[4])
gen_p <- data.frame(x = gen_p_x, y = gen_p_y)
gen_p <- gen_p[order(gen_p$x, gen_p$y),]
rownames(gen_p) <- NULL
n_c <- rpois(n_p, lambda_d)
df <- data.frame(parent = rep(as.numeric(rownames(gen_p)), n_c), x = numeric(sum(n_c)), y = numeric(sum(n_c)))
for (i in unique(df$parent)) {
y <- as.matrix(gen_p[i,])
df[df$parent == i,c("x", "y")] <- mvrnorm(n_c[i], y, sigma2 * diag(1, 2, 2))
}
df <- df[,c("x", "y")]
df <- df[order(df$x, df$y),]
rownames(df) <- NULL
df <- df[df$x >= original_area["xl"] & df$x <= original_area["xu"] & df$y >= original_area["yl"] & df$y <= original_area["yu"],]
return(df)
}
guestimate_Neymann_Scott_L_plot <- function(data, n, lambda_p, lambda_d, sigma2, dist = .2, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Neyman_Scott_pp(data, lambda_p, lambda_d, sigma2, seed[i], dist = dist)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.05^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.075^2, dist = .2)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot
ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
sim_Strauss_pp <- function(data, seed, beta, r) {
nn <- length(data$x)
set.seed(seed)
c <- exp(-beta)
gen <- Strauss(nn, c, r)
df <- data.frame(x = gen$x, y = gen$y)
return(df)
}
guestimate_Strauss_L_plot <- function(data, n, beta, r, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Strauss_pp(data, seed[i], beta, r)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
beta_100_r_0.1_Strauss_L_plot <- guestimate_Strauss_L_plot(bio_cell_data, 100, 100, 0.1)
beta_100_r_0.1_Strauss_L_plot
# ggsave("Figs/Problem 4/beta_100_r_0.1_Strauss_L_plot.png", beta_100_r_0.1_Strauss_L_plot, width = 6, height = 6)
beta_10_r_0.1_Strauss_L_plot <- guestimate_Strauss_L_plot(bio_cell_data, 100, 10, 0.1)
beta_10_r_0.1_Strauss_L_plot
# ggsave("Figs/Problem 4/beta_10_r_0.1_Strauss_L_plot.png", beta_10_r_0.1_Strauss_L_plot, width = 6, height = 6)
sim_Strauss_pp_seed.1_plot <- data_plot(sim_Strauss_pp(bio_cell_data, 1, 10, 0.1))
sim_Strauss_pp_seed.2_plot <- data_plot(sim_Strauss_pp(bio_cell_data, 2, 10, 0.1))
sim_Strauss_pp_seed.3_plot <- data_plot(sim_Strauss_pp(bio_cell_data, 3, 10, 0.1))
sim_Strauss_pp_seed.1_plot
sim_Strauss_pp_seed.2_plot
sim_Strauss_pp_seed.3_plot
# ggsave("Figs/Problem 4/sim_Strauss_pp_seed.1_plot.png", sim_Strauss_pp_seed.1_plot, width = 6, height = 6)
# ggsave("Figs/Problem 4/sim_Strauss_pp_seed.2_plot.png", sim_Strauss_pp_seed.2_plot, width = 6, height = 6)
# ggsave("Figs/Problem 4/sim_Strauss_pp_seed.3_plot.png", sim_Strauss_pp_seed.3_plot, width = 6, height = 6)
sim_Neyman_Scott_pp_seed.1_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 1, 10, 5, 0.075^2, dist = .2))
sim_Neyman_Scott_pp_seed.2_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 2, 10, 5, 0.075^2, dist = .2))
sim_Neyman_Scott_pp_seed.3_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 3, 10, 5, 0.075^2, dist = .2))
sim_Neyman_Scott_pp_seed.1_plot
sim_Neyman_Scott_pp_seed.2_plot
sim_Neyman_Scott_pp_seed.3_plot
sim_Neyman_Scott_pp_seed.1_plot
sim_Neyman_Scott_pp_seed.2_plot
sim_Neyman_Scott_pp_seed.3_plot
sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 1, 10, 5, 0.075^2, dist = .2)
sim_Neyman_Scott_pp <- function(data, seed, lambda_p, lambda_d, sigma2, dist = .2) {
original_area <- data$area
data$area <- c(data$area[1] - dist, data$area[2] + dist, data$area[3] - dist, data$area[4] + dist)
total_area <- as.numeric((data$area[2] - data$area[1]) * (data$area[4] - data$area[3]))
set.seed(seed)
n_p <- rpois(1, lambda_p * total_area)
gen_p_x <- runif(n_p, data$area[1], data$area[2])
gen_p_y <- runif(n_p, data$area[3], data$area[4])
gen_p <- data.frame(x = gen_p_x, y = gen_p_y)
gen_p <- gen_p[order(gen_p$x, gen_p$y),]
rownames(gen_p) <- NULL
n_c <- rpois(n_p, lambda_d)
df <- data.frame(parent = rep(as.numeric(rownames(gen_p)), n_c), x = numeric(sum(n_c)), y = numeric(sum(n_c)))
for (i in unique(df$parent)) {
y <- as.matrix(gen_p[i,])
df[df$parent == i,c("x", "y")] <- mvrnorm(n_c[i], y, sigma2 * diag(1, 2, 2))
}
df <- df[,c("x", "y")]
df <- df[order(df$x, df$y),]
rownames(df) <- NULL
df <- df[df$x >= original_area["xl"] & df$x <= original_area["xu"] & df$y >= original_area["yl"] & df$y <= original_area["yu"],]
return(df)
}
guestimate_Neymann_Scott_L_plot <- function(data, n, lambda_p, lambda_d, sigma2, dist = .2, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Neyman_Scott_pp(data, seed[i], lambda_p, lambda_d, sigma2, dist = dist)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.05^2)
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.075^2)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
sim_Neyman_Scott_pp_seed.1_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 1, 10, 5, 0.075^2))
sim_Neyman_Scott_pp_seed.2_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 2, 10, 5, 0.075^2))
sim_Neyman_Scott_pp_seed.3_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 3, 10, 5, 0.075^2))
sim_Neyman_Scott_pp_seed.1_plot
sim_Neyman_Scott_pp_seed.2_plot
sim_Neyman_Scott_pp_seed.3_plot
# ggsave("Figs/Problem 3/sim_Neyman_Scott_pp_seed.1_plot.png", sim_Neyman_Scott_pp_seed.1_plot, width = 6, height = 6)
sim_Neyman_Scott_pp <- function(data, seed, lambda_p, lambda_d, sigma2, dist = .2) {
original_area <- data$area
data$area <- c(data$area[1] - dist, data$area[2] + dist, data$area[3] - dist, data$area[4] + dist)
total_area <- as.numeric((data$area[2] - data$area[1]) * (data$area[4] - data$area[3]))
set.seed(seed)
n_p <- rpois(1, lambda_p * total_area)
gen_p_x <- runif(n_p, data$area[1], data$area[2])
gen_p_y <- runif(n_p, data$area[3], data$area[4])
gen_p <- data.frame(x = gen_p_x, y = gen_p_y)
gen_p <- gen_p[order(gen_p$x, gen_p$y),]
rownames(gen_p) <- NULL
n_c <- rpois(n_p, lambda_d)
df <- data.frame(parent = rep(as.numeric(rownames(gen_p)), n_c), x = numeric(sum(n_c)), y = numeric(sum(n_c)))
for (i in unique(df$parent)) {
y <- as.matrix(gen_p[i,])
df[df$parent == i,c("x", "y")] <- mvrnorm(n_c[i], y, sigma2 * diag(1, 2, 2))
}
df <- df[,c("x", "y")]
df <- df[order(df$x, df$y),]
rownames(df) <- NULL
df <- df[df$x >= original_area["xl"] & df$x <= original_area["xu"] & df$y >= original_area["yl"] & df$y <= original_area["yu"],]
return(df)
}
guestimate_Neymann_Scott_L_plot <- function(data, n, lambda_p, lambda_d, sigma2, dist = .2, level = 10) {
L.fun <- Kfn(data, 1)
l <- length(L.fun$x)
area <- data$area
df <- data.frame(realization = as.factor(rep(1:n, each = l)), L.x = numeric(n * l), L.y = numeric(n * l))
seed <- seq(1, by = n, length.out = n)
for (i in 1:n) {
gen <- sim_Neyman_Scott_pp(data, seed[i], lambda_p, lambda_d, sigma2, dist = dist)
gen_x <- gen$x
gen_y <- gen$y
gen_data <- list(x = gen_x, y = gen_y, area = area)
gen_L.fun <- Kfn(gen_data, 1)
df[df$realization == i, "L.x"] <- gen_L.fun$x
df[df$realization == i, "L.y"] <- gen_L.fun$y
}
df <- df %>%
group_by(L.x) %>%
summarize(L.y_lower = quantile(L.y, 1 - (1 - level/200)), L.y_upper = quantile(L.y, 1 - level/200))
df$L.y <- L.fun$y
return(ggplot(df) +
geom_line(aes(L.x, L.y), linewidth = 2) +
geom_ribbon(aes(x = L.x, ymin = L.y_lower, ymax = L.y_upper), fill = "blue", alpha = 0.3) +
coord_fixed() +
lims(x = c(0, .75), y = c(0, .75)) +
labs(x = "r", y = "L(r)") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.05^2)
lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.05.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot <- guestimate_Neymann_Scott_L_plot(ppinit("pp_redwood.dat"), 100, 10, 5, 0.075^2)
lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot
# ggsave("Figs/Problem 3/lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot.png", lambda_p_10_lambda_d_5_sigma2_0.075.2_dist_0.2_Neymann_Scott_L_plot, width = 6, height = 6)
sim_Neyman_Scott_pp_seed.1_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 1, 10, 5, 0.075^2))
sim_Neyman_Scott_pp_seed.2_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 2, 10, 5, 0.075^2))
sim_Neyman_Scott_pp_seed.3_plot <- data_plot(sim_Neyman_Scott_pp(ppinit("pp_redwood.dat"), 3, 10, 5, 0.075^2))
sim_Neyman_Scott_pp_seed.1_plot
sim_Neyman_Scott_pp_seed.2_plot
sim_Neyman_Scott_pp_seed.3_plot
ggsave("Figs/Problem 3/sim_Neyman_Scott_pp_seed.1_plot.png", sim_Neyman_Scott_pp_seed.1_plot, width = 6, height = 6)
ggsave("Figs/Problem 3/sim_Neyman_Scott_pp_seed.2_plot.png", sim_Neyman_Scott_pp_seed.2_plot, width = 6, height = 6)
ggsave("Figs/Problem 3/sim_Neyman_Scott_pp_seed.3_plot.png", sim_Neyman_Scott_pp_seed.3_plot, width = 6, height = 6)

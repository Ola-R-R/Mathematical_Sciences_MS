axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
p.e.power.1.scale.10.corr.plot <- my.cov.spatial.corr.plot(h, "powered.exponential", c(1, 10), 1)
p.e.power.1.9.scale.10.corr.plot <- my.cov.spatial.corr.plot(h, "powered.exponential", c(1, 10), 1.9)
m.smooth.1.range.20.corr.plot <- my.cov.spatial.corr.plot(h, "matern", c(1, 20), 1)
m.smooth.3.range.20.corr.plot <- my.cov.spatial.corr.plot(h, "matern", c(1, 20), 3)
p.e.power.1.scale.10.corr.plot
p.e.power.1.9.scale.10.corr.plot
m.smooth.1.range.20.corr.plot
m.smooth.3.range.20.corr.plot
p.e.power.1.scale.10.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(1, 10), 1)
p.e.power.1.scale.10.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(5, 10), 1)
p.e.power.1.9.scale.10.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(1, 10), 1.9)
p.e.power.1.9.scale.10.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(5, 10), 1.9)
m.smooth.1.range.20.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(1, 20), 1)
m.smooth.1.range.20.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(5, 20), 1)
m.smooth.3.range.20.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(1, 20), 3)
m.smooth.3.range.20.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(5, 20), 3)
p.e.power.1.scale.10.marginal.1.semi.var.plot
p.e.power.1.scale.10.marginal.5.semi.var.plot
p.e.power.1.9.scale.10.marginal.1.semi.var.plot
p.e.power.1.9.scale.10.marginal.5.semi.var.plot
m.smooth.1.range.20.marginal.1.semi.var.plot
m.smooth.1.range.20.marginal.5.semi.var.plot
m.smooth.3.range.20.marginal.1.semi.var.plot
m.smooth.3.range.20.marginal.5.semi.var.plot
fig.width <- 7
fig.height <- 3.5
# ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.corr.plot.png", p.e.power.1.scale.10.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.corr.plot.png", p.e.power.1.9.scale.10.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.corr.plot.png", m.smooth.1.range.20.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.corr.plot.png", m.smooth.3.range.20.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.marginal.1.semi.var.plot.png", p.e.power.1.scale.10.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.marginal.5.semi.var.plot.png", p.e.power.1.scale.10.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.marginal.1.semi.var.plot.png", p.e.power.1.9.scale.10.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.marginal.5.semi.var.plot.png", p.e.power.1.9.scale.10.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.marginal.1.semi.var.plot.png", m.smooth.1.range.20.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.marginal.5.semi.var.plot.png", m.smooth.1.range.20.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.marginal.1.semi.var.plot.png", m.smooth.3.range.20.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.marginal.5.semi.var.plot.png", m.smooth.3.range.20.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
h = seq(0, 1e2, 1e-2)
# My cov.spatial function that uses the parametrizations from the slides
my.cov.spatial <- function(h, cov.model, cov.pars, kappa) {
if (cov.model == "matern") return(cov.spatial(h, cov.model, c(cov.pars[1], cov.pars[2]/(sqrt(8 * kappa))), kappa))
if (cov.model == "exponential") return(cov.spatial(h, cov.model, cov.pars))
if (cov.model == "powered.exponential") return(cov.spatial(h, cov.model, cov.pars, kappa))
return(cat("Invalid covariance model. Please use 'matern', 'exponential' or 'powered.exponential'"))
}
# Function that plots the correlation function given distance h
my.cov.spatial.corr.plot <- function(h, cov.model, cov.pars, kappa) {
df <- data.frame(h = h, corr = my.cov.spatial(h, cov.model, cov.pars, kappa))
return(ggplot(df) +
geom_line(aes(x = h, y = corr), show.legend = F, linewidth = 1.5) +
labs(x = "Distance", y = "Correlation") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
# Function that plots the semi-variogram function given distance h
my.cov.spatial.semi.var.plot <- function(h, cov.model, cov.pars, kappa) {
semi.var <- my.cov.spatial(0, cov.model, cov.pars, kappa) - my.cov.spatial(h, cov.model, cov.pars, kappa)
df <- data.frame(h = h, semi.variance = semi.var)
return(ggplot(df) +
geom_line(aes(x = h, y = semi.variance), show.legend = F, linewidth = 1.5) +
labs(x = "Distance", y = "Semi-variance") +
scale_y_continuous(labels = comma_format(.01)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
p.e.power.1.scale.10.corr.plot <- my.cov.spatial.corr.plot(h, "powered.exponential", c(1, 10), 1)
p.e.power.1.9.scale.10.corr.plot <- my.cov.spatial.corr.plot(h, "powered.exponential", c(1, 10), 1.9)
m.smooth.1.range.20.corr.plot <- my.cov.spatial.corr.plot(h, "matern", c(1, 20), 1)
m.smooth.3.range.20.corr.plot <- my.cov.spatial.corr.plot(h, "matern", c(1, 20), 3)
p.e.power.1.scale.10.corr.plot
p.e.power.1.9.scale.10.corr.plot
m.smooth.1.range.20.corr.plot
m.smooth.3.range.20.corr.plot
p.e.power.1.scale.10.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(1, 10), 1)
p.e.power.1.scale.10.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(5, 10), 1)
p.e.power.1.9.scale.10.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(1, 10), 1.9)
p.e.power.1.9.scale.10.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(5, 10), 1.9)
m.smooth.1.range.20.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(1, 20), 1)
m.smooth.1.range.20.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(5, 20), 1)
m.smooth.3.range.20.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(1, 20), 3)
m.smooth.3.range.20.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(5, 20), 3)
p.e.power.1.scale.10.marginal.1.semi.var.plot
p.e.power.1.scale.10.marginal.5.semi.var.plot
p.e.power.1.9.scale.10.marginal.1.semi.var.plot
p.e.power.1.9.scale.10.marginal.5.semi.var.plot
m.smooth.1.range.20.marginal.1.semi.var.plot
m.smooth.1.range.20.marginal.5.semi.var.plot
m.smooth.3.range.20.marginal.1.semi.var.plot
m.smooth.3.range.20.marginal.5.semi.var.plot
fig.width <- 7
fig.height <- 3.5
ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.corr.plot.png", p.e.power.1.scale.10.corr.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.corr.plot.png", p.e.power.1.9.scale.10.corr.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.corr.plot.png", m.smooth.1.range.20.corr.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.corr.plot.png", m.smooth.3.range.20.corr.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.marginal.1.semi.var.plot.png", p.e.power.1.scale.10.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.marginal.5.semi.var.plot.png", p.e.power.1.scale.10.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.marginal.1.semi.var.plot.png", p.e.power.1.9.scale.10.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.marginal.5.semi.var.plot.png", p.e.power.1.9.scale.10.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.marginal.1.semi.var.plot.png", m.smooth.1.range.20.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.marginal.5.semi.var.plot.png", m.smooth.1.range.20.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.marginal.1.semi.var.plot.png", m.smooth.3.range.20.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.marginal.5.semi.var.plot.png", m.smooth.3.range.20.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# Defining the regular grid
D <- 1:50
# Function that calculates the covariance matrix of X
my.cov.X <- function(D, cov.model, cov.pars, kappa) return(my.cov.spatial(as.matrix(dist(as.matrix(D))), cov.model, cov.pars, kappa))
# Function that creates n realizations of X
my.sim.X <- function(D, cov.model, cov.pars, kappa, n, seed = cov.pars[1]) {
D <- as.matrix(D)
df <- data.frame(D = rep(D,n), Value = NA, Realization = as.factor(rep(1:n, each = nrow(D))))
mu <- rep(0, nrow(D))
Sigma <- my.cov.X(D, cov.model, cov.pars, kappa)
set.seed(seed)
for (i in 1:n) df[df$Realization == i, "Value"] <- mvrnorm(1, mu, Sigma)
return(df)
}
# Function that plots the n realizations of X
my.sim.X.plot <- function(D, cov.model, cov.pars, kappa, n) {
df <- my.sim.X(D, cov.model, cov.pars, kappa, n)
return(ggplot(df) +
geom_line(aes(x = D, y = Value, color = Realization)) +
labs(x = "Location", y = "Value", color = "Realization") +
ylim(-8, 8) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
p.e.power.1.scale.10.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(1, 10), 1, 4)
p.e.power.1.scale.10.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(5, 10), 1, 4)
p.e.power.1.9.scale.10.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(1, 10), 1.9, 4)
p.e.power.1.9.scale.10.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(5, 10), 1.9, 4)
m.smooth.1.range.20.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "matern", c(1, 20), 1, 4)
m.smooth.1.range.20.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "matern", c(5, 20), 1, 4)
m.smooth.3.range.20.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "matern", c(1, 20), 3, 4)
m.smooth.3.range.20.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "matern", c(5, 20), 3, 4)
p.e.power.1.scale.10.marginal.1.realizations.4.plot
p.e.power.1.scale.10.marginal.5.realizations.4.plot
p.e.power.1.9.scale.10.marginal.1.realizations.4.plot
p.e.power.1.9.scale.10.marginal.5.realizations.4.plot
m.smooth.1.range.20.marginal.1.realizations.4.plot
m.smooth.1.range.20.marginal.5.realizations.4.plot
m.smooth.3.range.20.marginal.1.realizations.4.plot
m.smooth.3.range.20.marginal.5.realizations.4.plot
fig.width <- 7
fig.height <- 3.5
ggsave("Figs/Problem 1/b)/p.e.power.1.scale.10.marginal.1.realizations.4.plot.png", p.e.power.1.scale.10.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/p.e.power.1.scale.10.marginal.5.realizations.4.plot.png", p.e.power.1.scale.10.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/p.e.power.1.9.scale.10.marginal.1.realizations.4.plot.png", p.e.power.1.9.scale.10.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/p.e.power.1.9.scale.10.marginal.5.realizations.4.plot.png", p.e.power.1.9.scale.10.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.1.range.20.marginal.1.realizations.4.plot.png", m.smooth.1.range.20.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.1.range.20.marginal.5.realizations.4.plot.png", m.smooth.1.range.20.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.3.range.20.marginal.1.realizations.4.plot.png", m.smooth.3.range.20.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.3.range.20.marginal.5.realizations.4.plot.png", m.smooth.3.range.20.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
# Defining the regular grid
D <- 1:50
# Function that calculates the covariance matrix of X
my.cov.X <- function(D, cov.model, cov.pars, kappa) return(my.cov.spatial(as.matrix(dist(as.matrix(D))), cov.model, cov.pars, kappa))
# Function that creates n realizations of X
my.sim.X <- function(D, cov.model, cov.pars, kappa, n, seed = cov.pars[1]) {
D <- as.matrix(D)
df <- data.frame(D = rep(D,n), Value = NA, Realization = as.factor(rep(1:n, each = nrow(D))))
mu <- rep(0, nrow(D))
Sigma <- my.cov.X(D, cov.model, cov.pars, kappa)
set.seed(seed)
for (i in 1:n) df[df$Realization == i, "Value"] <- mvrnorm(1, mu, Sigma)
return(df)
}
# Function that plots the n realizations of X
my.sim.X.plot <- function(D, cov.model, cov.pars, kappa, n) {
df <- my.sim.X(D, cov.model, cov.pars, kappa, n)
return(ggplot(df) +
geom_line(aes(x = D, y = Value, color = Realization)) +
labs(x = "Location", y = "Value", color = "Realization") +
ylim(-8, 8) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
p.e.power.1.scale.10.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(1, 10), 1, 4)
p.e.power.1.scale.10.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(5, 10), 1, 4)
p.e.power.1.9.scale.10.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(1, 10), 1.9, 4)
p.e.power.1.9.scale.10.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(5, 10), 1.9, 4)
m.smooth.1.range.20.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "matern", c(1, 20), 1, 4)
m.smooth.1.range.20.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "matern", c(5, 20), 1, 4)
m.smooth.3.range.20.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "matern", c(1, 20), 3, 4)
m.smooth.3.range.20.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "matern", c(5, 20), 3, 4)
p.e.power.1.scale.10.marginal.1.realizations.4.plot
p.e.power.1.scale.10.marginal.5.realizations.4.plot
p.e.power.1.9.scale.10.marginal.1.realizations.4.plot
p.e.power.1.9.scale.10.marginal.5.realizations.4.plot
m.smooth.1.range.20.marginal.1.realizations.4.plot
m.smooth.1.range.20.marginal.5.realizations.4.plot
m.smooth.3.range.20.marginal.1.realizations.4.plot
m.smooth.3.range.20.marginal.5.realizations.4.plot
fig.width <- 7
fig.height <- 3.5
ggsave("Figs/Problem 1/b)/p.e.power.1.scale.10.marginal.1.realizations.4.plot.png", p.e.power.1.scale.10.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/p.e.power.1.scale.10.marginal.5.realizations.4.plot.png", p.e.power.1.scale.10.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/p.e.power.1.9.scale.10.marginal.1.realizations.4.plot.png", p.e.power.1.9.scale.10.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/p.e.power.1.9.scale.10.marginal.5.realizations.4.plot.png", p.e.power.1.9.scale.10.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.1.range.20.marginal.1.realizations.4.plot.png", m.smooth.1.range.20.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.1.range.20.marginal.5.realizations.4.plot.png", m.smooth.1.range.20.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.3.range.20.marginal.1.realizations.4.plot.png", m.smooth.3.range.20.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
ggsave("Figs/Problem 1/b)/m.smooth.3.range.20.marginal.5.realizations.4.plot.png", m.smooth.3.range.20.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
topo <- read.csv("topo.dat", sep = "")
my.topo.plot <- ggplot(topo, aes(x, y)) +
geom_point(aes(color = z), size = 7) +
coord_fixed() +
scale_color_viridis_c(limits = c(650, 1000)) +
guides(color = guide_colourbar(label = T, ticks = F, barwidth = 1, barheight = 10)) +
xlim(c(-5,321)) +
ylim(c(-5,321)) +
labs(color = "Elevation") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm"))
ggsave("Figs/Problem 2/a)/topo.plot.png", my.topo.plot, width = 13, height = 13)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 10)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(ggspatial)
library(geoR)
library(akima)
library(fields)
library(sp)
library(raster)
library(scales)
library(haven)
library(mnormt)
library(plotly)
library(rayshader)
library(gridExtra)
library(forecast)
library(viridis)
library(plot3D)
library(demogR)
h = seq(0, 1e2, 1e-2)
# My cov.spatial function that uses the parametrizations from the slides
my.cov.spatial <- function(h, cov.model, cov.pars, kappa) {
if (cov.model == "matern") return(cov.spatial(h, cov.model, c(cov.pars[1], cov.pars[2]/(sqrt(8 * kappa))), kappa))
if (cov.model == "exponential") return(cov.spatial(h, cov.model, cov.pars))
if (cov.model == "powered.exponential") return(cov.spatial(h, cov.model, cov.pars, kappa))
return(cat("Invalid covariance model. Please use 'matern', 'exponential' or 'powered.exponential'"))
}
# Function that plots the correlation function given distance h
my.cov.spatial.corr.plot <- function(h, cov.model, cov.pars, kappa) {
df <- data.frame(h = h, corr = my.cov.spatial(h, cov.model, cov.pars, kappa))
return(ggplot(df) +
geom_line(aes(x = h, y = corr), show.legend = F, linewidth = 1.5) +
labs(x = "Distance", y = "Correlation") +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
# Function that plots the semi-variogram function given distance h
my.cov.spatial.semi.var.plot <- function(h, cov.model, cov.pars, kappa) {
semi.var <- my.cov.spatial(0, cov.model, cov.pars, kappa) - my.cov.spatial(h, cov.model, cov.pars, kappa)
df <- data.frame(h = h, semi.variance = semi.var)
return(ggplot(df) +
geom_line(aes(x = h, y = semi.variance), show.legend = F, linewidth = 1.5) +
labs(x = "Distance", y = "Semi-variance") +
scale_y_continuous(labels = comma_format(.01)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
p.e.power.1.scale.10.corr.plot <- my.cov.spatial.corr.plot(h, "powered.exponential", c(1, 10), 1)
p.e.power.1.9.scale.10.corr.plot <- my.cov.spatial.corr.plot(h, "powered.exponential", c(1, 10), 1.9)
m.smooth.1.range.20.corr.plot <- my.cov.spatial.corr.plot(h, "matern", c(1, 20), 1)
m.smooth.3.range.20.corr.plot <- my.cov.spatial.corr.plot(h, "matern", c(1, 20), 3)
p.e.power.1.scale.10.corr.plot
p.e.power.1.9.scale.10.corr.plot
m.smooth.1.range.20.corr.plot
m.smooth.3.range.20.corr.plot
p.e.power.1.scale.10.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(1, 10), 1)
p.e.power.1.scale.10.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(5, 10), 1)
p.e.power.1.9.scale.10.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(1, 10), 1.9)
p.e.power.1.9.scale.10.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "powered.exponential", c(5, 10), 1.9)
m.smooth.1.range.20.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(1, 20), 1)
m.smooth.1.range.20.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(5, 20), 1)
m.smooth.3.range.20.marginal.1.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(1, 20), 3)
m.smooth.3.range.20.marginal.5.semi.var.plot <- my.cov.spatial.semi.var.plot(h, "matern", c(5, 20), 3)
p.e.power.1.scale.10.marginal.1.semi.var.plot
p.e.power.1.scale.10.marginal.5.semi.var.plot
p.e.power.1.9.scale.10.marginal.1.semi.var.plot
p.e.power.1.9.scale.10.marginal.5.semi.var.plot
m.smooth.1.range.20.marginal.1.semi.var.plot
m.smooth.1.range.20.marginal.5.semi.var.plot
m.smooth.3.range.20.marginal.1.semi.var.plot
m.smooth.3.range.20.marginal.5.semi.var.plot
# fig.width <- 7
# fig.height <- 3.5
# ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.corr.plot.png", p.e.power.1.scale.10.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.corr.plot.png", p.e.power.1.9.scale.10.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.corr.plot.png", m.smooth.1.range.20.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.corr.plot.png", m.smooth.3.range.20.corr.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.marginal.1.semi.var.plot.png", p.e.power.1.scale.10.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.scale.10.marginal.5.semi.var.plot.png", p.e.power.1.scale.10.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.marginal.1.semi.var.plot.png", p.e.power.1.9.scale.10.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/p.e.power.1.9.scale.10.marginal.5.semi.var.plot.png", p.e.power.1.9.scale.10.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.marginal.1.semi.var.plot.png", m.smooth.1.range.20.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.1.range.20.marginal.5.semi.var.plot.png", m.smooth.1.range.20.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.marginal.1.semi.var.plot.png", m.smooth.3.range.20.marginal.1.semi.var.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/a)/m.smooth.3.range.20.marginal.5.semi.var.plot.png", m.smooth.3.range.20.marginal.5.semi.var.plot, width = fig.width, height = fig.height)
# Defining the regular grid
D <- 1:50
# Function that calculates the covariance matrix of X
my.cov.X <- function(D, cov.model, cov.pars, kappa) return(my.cov.spatial(as.matrix(dist(as.matrix(D))), cov.model, cov.pars, kappa))
# Function that creates n realizations of X
my.sim.X <- function(D, cov.model, cov.pars, kappa, n, seed = cov.pars[1]) {
D <- as.matrix(D)
df <- data.frame(D = rep(D,n), Value = NA, Realization = as.factor(rep(1:n, each = nrow(D))))
mu <- rep(0, nrow(D))
Sigma <- my.cov.X(D, cov.model, cov.pars, kappa)
set.seed(seed)
for (i in 1:n) df[df$Realization == i, "Value"] <- mvrnorm(1, mu, Sigma)
return(df)
}
# Function that plots the n realizations of X
my.sim.X.plot <- function(D, cov.model, cov.pars, kappa, n) {
df <- my.sim.X(D, cov.model, cov.pars, kappa, n)
return(ggplot(df) +
geom_line(aes(x = D, y = Value, color = Realization)) +
labs(x = "Location", y = "Value", color = "Realization") +
ylim(-8, 8) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
p.e.power.1.scale.10.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(1, 10), 1, 4)
p.e.power.1.scale.10.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(5, 10), 1, 4)
p.e.power.1.9.scale.10.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(1, 10), 1.9, 4)
p.e.power.1.9.scale.10.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "powered.exponential", c(5, 10), 1.9, 4)
m.smooth.1.range.20.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "matern", c(1, 20), 1, 4)
m.smooth.1.range.20.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "matern", c(5, 20), 1, 4)
m.smooth.3.range.20.marginal.1.realizations.4.plot <- my.sim.X.plot(D, "matern", c(1, 20), 3, 4)
m.smooth.3.range.20.marginal.5.realizations.4.plot <- my.sim.X.plot(D, "matern", c(5, 20), 3, 4)
p.e.power.1.scale.10.marginal.1.realizations.4.plot
p.e.power.1.scale.10.marginal.5.realizations.4.plot
p.e.power.1.9.scale.10.marginal.1.realizations.4.plot
p.e.power.1.9.scale.10.marginal.5.realizations.4.plot
m.smooth.1.range.20.marginal.1.realizations.4.plot
m.smooth.1.range.20.marginal.5.realizations.4.plot
m.smooth.3.range.20.marginal.1.realizations.4.plot
m.smooth.3.range.20.marginal.5.realizations.4.plot
# fig.width <- 7
# fig.height <- 3.5
# ggsave("Figs/Problem 1/b)/p.e.power.1.scale.10.marginal.1.realizations.4.plot.png", p.e.power.1.scale.10.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/b)/p.e.power.1.scale.10.marginal.5.realizations.4.plot.png", p.e.power.1.scale.10.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/b)/p.e.power.1.9.scale.10.marginal.1.realizations.4.plot.png", p.e.power.1.9.scale.10.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/b)/p.e.power.1.9.scale.10.marginal.5.realizations.4.plot.png", p.e.power.1.9.scale.10.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/b)/m.smooth.1.range.20.marginal.1.realizations.4.plot.png", m.smooth.1.range.20.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/b)/m.smooth.1.range.20.marginal.5.realizations.4.plot.png", m.smooth.1.range.20.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/b)/m.smooth.3.range.20.marginal.1.realizations.4.plot.png", m.smooth.3.range.20.marginal.1.realizations.4.plot, width = fig.width, height = fig.height)
# ggsave("Figs/Problem 1/b)/m.smooth.3.range.20.marginal.5.realizations.4.plot.png", m.smooth.3.range.20.marginal.5.realizations.4.plot, width = fig.width, height = fig.height)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 1)
s <- c(10, 25, 30)
y <- my.sim.X(D, "matern", c(5, 20), 3, 1)[s, "Value"]
my.cov.Y <- function(D, cov.model, cov.pars, kappa, nugget) {
D <- as.matrix(D)
return(my.cov.spatial(as.matrix(dist(D)), cov.model, cov.pars, kappa) + nugget * diag(1, nrow(D), nrow(D)))
}
my.cond.mean.X_Y <- function(D, s, y, cov.model, cov.pars, kappa, nugget) {
cov.Y <- my.cov.Y(s, cov.model, cov.pars, kappa, nugget)
cov.X_Y <- my.cov.X(D, cov.model, cov.pars, kappa)[, s]
return(cov.X_Y %*% solve(cov.Y) %*% y)
}
my.cond.cov.X_Y <- function(D, s, cov.model, cov.pars, kappa, nugget) {
cov.X <- my.cov.X(D, cov.model, cov.pars, kappa)
cov.Y <- my.cov.Y(s, cov.model, cov.pars, kappa, nugget)
cov.X_Y <- cov.X[, s]
return(cov.X - cov.X_Y %*% solve(cov.Y) %*% t(cov.X_Y))
}
my.pred.pred_int.plot <- function(D, s, y, cov.model, cov.pars, kappa, nugget, level = 10) {
z <- qnorm(1 - level/200)
mean <- my.cond.mean.X_Y(D, s, y, cov.model, cov.pars, kappa, nugget)
Sigma <- my.cond.cov.X_Y(D, s, cov.model, cov.pars, kappa, nugget)
df <- data.frame(D = D, pred = mean, lower = mean - z * sqrt(diag(Sigma)),upper = mean + z * sqrt(diag(Sigma)))
observed <- data.frame(D = D[s], y = y)
return(ggplot(df, aes(x = D)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "#1b98e0", alpha = .2) +
geom_line(aes(y = pred), linewidth = 1.25) +
geom_line(aes(y = lower), df, color = "blue", linetype = "dashed", linewidth = 1.25) +
geom_line(aes(y = upper), df, color = "blue", linetype = "dashed", linewidth = 1.25) +
geom_point(aes(x = D, y = y), observed, color = "red", size = 2, show.legend = F) +
labs(x = "Location", y = "Value") +
ylim(c(-8, 8)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
pred.pred_int.nugget.0.plot <- my.pred.pred_int.plot(D, s, y, "matern", c(5, 20), 3, 0)
my.sim.X_Y <- function(D, s, y, cov.model, cov.pars, kappa, nugget, n = 100, seed = cov.pars[1]) {
mu <- my.cond.mean.X_Y(D, s, y, cov.model, cov.pars, kappa, nugget)
Sigma <- my.cond.cov.X_Y(D, s, cov.model, cov.pars, kappa, nugget)
df <- data.frame(D = rep(D,n), Value = NA, Realization = as.factor(rep(1:n, each = length(D))))
set.seed(seed)
for (i in 1:n) df[df$Realization == i,]$Value <- mvrnorm(1, mu, Sigma)
return(df)
}
my.emp.X_Y <- function(D, s, y, cov.model, cov.pars, kappa, nugget, n = 100, level = 10) {
df <- my.sim.X_Y(D, s, y, cov.model, cov.pars, kappa, nugget, n)
z <- qnorm(1 - level/200)
df <- df %>% group_by(D) %>% summarise(mean = mean(Value), lower = mean(Value) - z * sd(Value), upper = mean(Value) + z * sd(Value))
return(df)
}
my.sim.X_Y.emp.X_Y.plot <- function(D, s, y, cov.model, cov.pars, kappa, nugget, n = 100, level = 10) {
sim <- my.sim.X_Y(D, s, y, cov.model, cov.pars, kappa, nugget, n)
emp <- my.emp.X_Y(D, s, y, cov.model, cov.pars, kappa, nugget, n, level)
observed <- data.frame(D = D[s], y = y)
return(ggplot(sim, aes(x = D)) +
geom_line(aes(y = Value, color = Realization), show.legend = F) +
geom_ribbon(aes(ymin = lower, ymax = upper), emp, fill = "#1b98e0", alpha = .2) +
geom_line(aes(y = mean), emp, linewidth = 1.25) +
geom_line(aes(y = lower), emp, color = "blue", linetype = "dashed", linewidth = 1.25) +
geom_line(aes(y = upper), emp, color = "blue", linetype = "dashed", linewidth = 1.25) +
geom_point(aes(x = D, y = y), observed, color = "red", size = 2, show.legend = F) +
labs(x = "Location", y = "Realization", color = "Simulation") +
ylim(c(-8, 8)) +
theme(axis.text = element_text(size = 15, margin = unit(0.5, "cm")),
axis.title = element_text(size = 18),
plot.title = element_text(size = 20),
legend.title = element_text(size = 15),
legend.text = element_text(size = 14),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.ticks = element_line(linewidth = 1),
axis.ticks.length = unit(0.3, "cm")))
}
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 1)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 2)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 3)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 4)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 5)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 100)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 1000)
my.sim.X_Y.emp.X_Y.plot(D, s, y, "matern", c(5, 20), 3, 0, 50)
mu = c(0,0,0)
Sigma <- diag(0, 3, 3)
mvrnorm(1, mu, Sigma)
Sigma <- diag(1, 3, 3)
Sigma
mvrnorm(1, mu, Sigma)
mvrnorm(1, mu, Sigma)''
mvrnorm(1, mu, Sigma)
Sigma[1, 2] <- Sigma[2, 1] <- .9
Sigma
mvrnorm(1, mu, Sigma)
